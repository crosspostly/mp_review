/**
 * @file Code.gs
 * @description Main backend logic for the Multi-Store Auto-Reply Manager.
 */

// ============ GLOBAL CONFIGURATION ============
const CONFIG = {
  PROPERTIES_KEY: 'REGISTERED_STORES',
  DEV_MODE_KEY: 'DEV_MODE_ENABLED',
  SHEETS: {
    TEMPLATES: '–®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤'
  },
  LOG_SHEET_NAME: 'üêû –õ–æ–≥ –æ—Ç–ª–∞–¥–∫–∏',
  LOG_MAX_ROWS: 2500,
  RESPOND_TO_RATINGS: [4, 5],
  DELAY_BETWEEN_REQUESTS: 1100,
  MAX_FEEDBACKS_PER_RUN: 50,
  MIN_REVIEW_TEXT_LENGTH: 3, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  HEADERS: ['ID –æ—Ç–∑—ã–≤–∞', '–î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞', '–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–°—Å—ã–ª–∫–∞', '–û—Ü–µ–Ω–∫–∞', '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞', '–ü–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç', '–°—Ç–∞—Ç—É—Å', '–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏', '–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏'],
  STATUS: {
    PENDING: '–ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ',
    SENT: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    ERROR: '–û—à–∏–±–∫–∞',
    MANUAL: '–†—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç',
    SKIPPED_RATING: '–ü—Ä–æ–ø—É—â–µ–Ω–æ (—Ä–µ–π—Ç–∏–Ω–≥)',
    SKIPPED_PROCESSED: '–ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)',
    SKIPPED_EMPTY: '–ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤)',
    NO_TEMPLATE: '–ù–µ—Ç —à–∞–±–ª–æ–Ω–∞'
  }
};

// ============ WILDBERRIES API CONFIGURATION ============
const WB_CONFIG = {
  MARKETPLACE_NAME: 'Wildberries',
  MARKETPLACE_CODE: 'WB',
  API_BASE_URL: 'https://feedbacks-api.wildberries.ru/api/v1',
  ENDPOINTS: {
    GET_FEEDBACKS: '/feedbacks',
    SEND_ANSWER: '/feedbacks'  // {id} –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  },
  API_LIMITS: {
    MAX_TAKE: 1000,          // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç (–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω)
    DEFAULT_SKIP: 0,
    RECOMMENDED_TAKE: 100,   // –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç
    SAFE_TAKE: 500,          // –ó–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    PAGINATION_STEP: 100,    // –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    MAX_PAGES: 10            // –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫ (1000 –æ—Ç–∑—ã–≤–æ–≤)
  },
  PAGINATION: {
    ENABLED: true,
    STORAGE_KEY: 'WB_LAST_SKIP_OFFSET',
    AUTO_RESET_HOURS: 24     // –°–±—Ä–æ—Å offset –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
  },
  RATE_LIMITS: {
    REQUESTS_PER_MINUTE: 60,        // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    DELAY_BETWEEN_REQUESTS: 1100,   // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    BURST_LIMIT: 10,                // –ú–∞–∫—Å–∏–º—É–º –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥ (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏)
    BURST_DELAY: 100,               // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ burst —Ä–µ–∂–∏–º–µ (–º—Å)
    RECOVERY_DELAY: 5000            // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è burst –ª–∏–º–∏—Ç–∞ (–º—Å)
  },
  BATCH_PROCESSING: {
    ENABLED: false,                 // WB API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç batch –æ—Ç–ø—Ä–∞–≤–∫—É
    ALTERNATIVE: 'smart_throttling' // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
  },
  RATING_FIELDS: {
    REVIEW_RATING: 'rating',        // –†–µ–π—Ç–∏–Ω–≥ –û–¢–ó–´–í–ê (1-5, –º–æ–∂–µ—Ç –±—ã—Ç—å null –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞)
    PRODUCT_RATING: 'productValuation' // –û–±—â–∞—è –û–¶–ï–ù–ö–ê –¢–û–í–ê–†–ê (1-5, –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ)
  },
  DATA_EXPLANATION: {
    // –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö WB API:
    // 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç —Ç–æ–≤–∞—Ä ‚Üí —Å—Ç–∞–≤–∏—Ç productValuation (1-5 –∑–≤–µ–∑–¥)
    // 2. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –æ—Ç–∑—ã–≤ ‚Üí –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è rating + text
    // 3. –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞) ‚Üí rating=null, text=null
    // 4. –û—Ç–≤–µ—á–∞—Ç—å –º–æ–∂–Ω–æ –¢–û–õ–¨–ö–û –Ω–∞ –æ—Ç–∑—ã–≤—ã —Å —Ç–µ–∫—Å—Ç–æ–º (rating –Ω–µ null)
    RATING_LOGIC: 'rating || productValuation || 0', // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–∑—ã–≤–∞, –∑–∞—Ç–µ–º —Ç–æ–≤–∞—Ä–∞
    RESPONDABLE: '–¢–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤—ã —Å —Ç–µ–∫—Å—Ç–æ–º (rating != null && text != null)'
  },
  REQUIRED_TEXT_FIELDS: ['text'], // –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç
  PRODUCT_URL_TEMPLATE: 'https://www.wildberries.ru/catalog/{productId}/detail.aspx'
};

// ============ OZON API CONFIGURATION ============
const OZON_CONFIG = {
  MARKETPLACE_NAME: 'Ozon',
  MARKETPLACE_CODE: 'OZON',
  API_BASE_URL: 'https://api-seller.ozon.ru/v1',
  ENDPOINTS: {
    GET_REVIEWS: '/review/list',
    SEND_COMMENT: '/review/comment/create'
  },
  API_LIMITS: {
    MAX_LIMIT: 100,          // –†–ï–ê–õ–¨–ù–´–ô –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç Ozon API (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ)
    MIN_LIMIT: 20,           // –†–ï–ê–õ–¨–ù–´–ô –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç Ozon API
    DEFAULT_LIMIT: 100,      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç
    RECOMMENDED_LIMIT: 100,  // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π = –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    PAGINATION_STEP: 100     // –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º—É–º
  },
  PAGINATION: {
    ENABLED: false,          // Ozon API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç skip/offset –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    ALTERNATIVE: 'timestamp_based' // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp-based filtering
  },
  RATE_LIMITS: {
    REQUESTS_PER_MINUTE: 100,       // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É (–≤—ã—à–µ —á–µ–º WB)
    DELAY_BETWEEN_REQUESTS: 600,    // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–±—ã—Å—Ç—Ä–µ–µ WB)
    BURST_LIMIT: 20,                // –ú–∞–∫—Å–∏–º—É–º –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥ (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏)
    BURST_DELAY: 50,                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ burst —Ä–µ–∂–∏–º–µ (–º—Å)
    RECOVERY_DELAY: 3000            // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è burst –ª–∏–º–∏—Ç–∞ (–º—Å)
  },
  BATCH_PROCESSING: {
    ENABLED: false,                 // Ozon API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç batch –æ—Ç–ø—Ä–∞–≤–∫—É
    ALTERNATIVE: 'sequential_with_smart_throttling' // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å —É–º–Ω—ã–º throttling
  },
  WEBHOOK: {
    SUPPORTED: false,               // Ozon API webhook —Ç—Ä–µ–±—É–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    ALTERNATIVE: 'intelligent_polling' // –£–º–Ω—ã–π polling —Å timestamp filtering
  },
  RATING_FIELDS: {
    REVIEW_RATING: 'rating'
  },
  REVIEW_STATUSES: {
    UNPROCESSED: 'UNPROCESSED',
    PROCESSED: 'PROCESSED'
  },
  REQUIRED_TEXT_FIELDS: ['text'], // –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç
  PRODUCT_URL_TEMPLATE: 'https://www.ozon.ru/product/{sku}'
};

// ============ MENU CREATION ============
function onOpen(e) {
  const ui = SpreadsheetApp.getUi();
  const menu = ui.createMenu('ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã');
  menu.addItem('‚öôÔ∏è –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞', 'initialSetup');
  menu.addItem('üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏', 'showStoreManagerSidebar');
  menu.addSeparator();
  menu.addItem('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ–π—á–∞—Å', 'processAllStores');
  menu.addItem('‚ñ∂Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã', 'sendPendingAnswers');
  menu.addItem('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ ID', 'manuallyDeleteReviewById');
  menu.addSeparator();
  const devMenu = ui.createMenu('üõ†Ô∏è –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞');
  devMenu.addItem('–í–∫–ª—é—á–∏—Ç—å', 'enableDevMode');
  devMenu.addItem('–í—ã–∫–ª—é—á–∏—Ç—å', 'disableDevMode');
  menu.addSubMenu(devMenu);
  
  const triggerSubMenu = ui.createMenu('üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º');
  triggerSubMenu.addItem('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ (5 –º–∏–Ω)', 'createTrigger5Min');
  triggerSubMenu.addItem('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ (30 –º–∏–Ω)', 'createTrigger30Min');
  triggerSubMenu.addItem('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ (1 —á–∞—Å)', 'createTrigger1Hour');
  triggerSubMenu.addSeparator();
  triggerSubMenu.addItem('‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞', 'deleteAllTriggers');
  menu.addSubMenu(triggerSubMenu);
  
  menu.addSeparator();
  menu.addItem('üêû –ü–æ–∫–∞–∑–∞—Ç—å/–°–∫—Ä—ã—Ç—å –ª–æ–≥ –æ—Ç–ª–∞–¥–∫–∏', 'toggleLogSheet');
  menu.addToUi();
  updateDevModeStatus();
}

// ============ DEV MODE ============
function setDevMode(enabled) {
  PropertiesService.getUserProperties().setProperty(CONFIG.DEV_MODE_KEY, enabled);
  const status = enabled ? '–í–ö–õ–Æ–ß–ï–ù' : '–í–´–ö–õ–Æ–ß–ï–ù';
  log(`–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ${status}.`);
  SpreadsheetApp.getUi().alert(`–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ${status}.`);
  updateDevModeStatus();
}

function enableDevMode() { setDevMode('true'); }
function disableDevMode() { setDevMode('false'); }

function isDevMode() {
  return PropertiesService.getUserProperties().getProperty(CONFIG.DEV_MODE_KEY) === 'true';
}

function updateDevModeStatus() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(CONFIG.SHEETS.TEMPLATES);
  if (sheet) {
    sheet.getRange("D1").setValue(isDevMode() ? "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê: –í–ö–õ" : "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê: –í–´–ö–õ")
         .setFontWeight("bold")
         .setFontColor(isDevMode() ? "#EA4335" : "#34A853");
  }
}

// ============ –û–ë–û–ì–ê–©–ï–ù–ò–ï –ù–ê–ó–í–ê–ù–ò–Ø–ú–ò –¢–û–í–ê–†–û–í ============

/**
 * WB: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ nmId —á–µ—Ä–µ–∑ Content API
 * @param {Array} nmIds - –ú–∞—Å—Å–∏–≤ nmId —Ç–æ–≤–∞—Ä–æ–≤
 * @param {string} apiKey - WB API –∫–ª—é—á
 * @returns {Object} –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ {nmId: –Ω–∞–∑–≤–∞–Ω–∏–µ}
 */
function getWbProductNames(nmIds, apiKey) {
    if (!nmIds || nmIds.length === 0) return {};
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueNmIds = [...new Set(nmIds)];
    log(`[WB Products] üè∑Ô∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è ${uniqueNmIds.length} —Ç–æ–≤–∞—Ä–æ–≤...`);
    
    const url = 'https://suppliers-api.wildberries.ru/content/v2/cards/cursor/list';
    const payload = {
        filter: {
            nmID: uniqueNmIds
        },
        limit: Math.min(uniqueNmIds.length, 100) // WB –ª–∏–º–∏—Ç
    };
    
    try {
        const response = UrlFetchApp.fetch(url, {
            method: 'POST',
            headers: { 
                'Authorization': apiKey,
                'Content-Type': 'application/json'
            },
            payload: JSON.stringify(payload),
            muteHttpExceptions: true
        });
        
        const responseCode = response.getResponseCode();
        const responseBody = response.getContentText();
        
        if (responseCode !== 200) {
            log(`[WB Products] ‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π: ${responseCode}. ${responseBody}`);
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫ API
            if (responseCode === 401) {
                log(`[WB Products] ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –¥–ª—è Content API`);
            } else if (responseCode === 403) {
                log(`[WB Products] ‚ùå –ö–†–ò–¢–ò–ß–ù–û: API –∫–ª—é—á –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Content API`);
            } else if (responseCode === 404) {
                log(`[WB Products] ‚ùå –ö–†–ò–¢–ò–ß–ù–û: Content API endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è URL.`);
            } else if (responseCode === 429) {
                log(`[WB Products] ‚ùå –ü–†–ï–í–´–®–ï–ù –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Content API. –ù—É–∂–Ω–∞ –ø–∞—É–∑–∞.`);
            }
            return {};
        }
        
        const json = JSON.parse(responseBody);
        const cards = json.data?.cards || [];
        
        const productNames = {};
        cards.forEach(card => {
            if (card.nmID && card.name) {
                productNames[card.nmID] = card.name;
            }
        });
        
        log(`[WB Products] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${Object.keys(productNames).length} –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤`);
        return productNames;
        
    } catch (e) {
        log(`[WB Products] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${e.message}`);
        return {};
    }
}

/**
 * Ozon: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ offer_id —á–µ—Ä–µ–∑ Product API
 * @param {Array} offerIds - –ú–∞—Å—Å–∏–≤ offer_id —Ç–æ–≤–∞—Ä–æ–≤
 * @param {string} clientId - Ozon Client ID
 * @param {string} apiKey - Ozon API –∫–ª—é—á
 * @returns {Object} –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ {offer_id: –Ω–∞–∑–≤–∞–Ω–∏–µ}
 */
function getOzonProductNames(offerIds, clientId, apiKey) {
    if (!offerIds || offerIds.length === 0) return {};
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueOfferIds = [...new Set(offerIds)];
    log(`[Ozon Products] üè∑Ô∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è ${uniqueOfferIds.length} —Ç–æ–≤–∞—Ä–æ–≤...`);
    
    const url = 'https://api-seller.ozon.ru/v3/product/list';
    const payload = {
        filter: {
            offer_id: uniqueOfferIds
        },
        last_id: "",
        limit: Math.min(uniqueOfferIds.length, 100) // Ozon –ª–∏–º–∏—Ç
    };
    
    try {
        const response = UrlFetchApp.fetch(url, {
            method: 'POST',
            headers: { 
                'Client-Id': clientId, 
                'Api-Key': apiKey,
                'Content-Type': 'application/json'
            },
            payload: JSON.stringify(payload),
            muteHttpExceptions: true
        });
        
        const responseCode = response.getResponseCode();
        const responseBody = response.getContentText();
        
        if (responseCode !== 200) {
            log(`[Ozon Products] ‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π: ${responseCode}. ${responseBody}`);
            return {};
        }
        
        const json = JSON.parse(responseBody);
        const items = json.result?.items || [];
        
        const productNames = {};
        items.forEach(item => {
            if (item.offer_id && item.name) {
                productNames[item.offer_id] = item.name;
            }
        });
        
        log(`[Ozon Products] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${Object.keys(productNames).length} –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤`);
        return productNames;
        
    } catch (e) {
        log(`[Ozon Products] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${e.message}`);
        return {};
    }
}

// ============ –î–ê–¢–ê –£–¢–ò–õ–ò–¢–´ ============

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞—Ç—ã –≤ Unix timestamp –¥–ª—è WB API
 * @param {string} dateString - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD"
 * @returns {number} Unix timestamp
 */
function getUnixTimestamp(dateString) {
    return Math.floor(new Date(dateString).getTime() / 1000);
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞—Ç—ã –≤ RFC3339 —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Ozon API
 * @param {string} dateString - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD" 
 * @returns {string} RFC3339 —Ñ–æ—Ä–º–∞—Ç
 */
function formatDateForOzon(dateString) {
    return new Date(dateString + 'T00:00:00.000Z').toISOString();
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π)
 * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥
 * @returns {Object} {dateFrom, dateTo}
 */
function getDateRange(days = 30) {
    const today = new Date();
    const dateFrom = new Date(today.getTime() - (days * 24 * 60 * 60 * 1000));
    
    return {
        dateFrom: dateFrom.toISOString().split('T')[0], // YYYY-MM-DD
        dateTo: today.toISOString().split('T')[0]       // YYYY-MM-DD
    };
}

// ============ WB PAGINATION FUNCTIONS ============

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ WB —Å –ø–æ–ª–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π "–¥–æ –ø–æ–±–µ–¥–Ω–æ–≥–æ"
 * @param {string} apiKey - WB API –∫–ª—é—á
 * @param {boolean} includeAnswered - –í–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
 * @param {Object} store - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
 */
function getWbFeedbacksWithFullPagination(apiKey, includeAnswered = false, store = null) {
    log(`[WB] üöÄ –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–ô –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ "–¥–æ –ø–æ–±–µ–¥–Ω–æ–≥–æ" (includeAnswered=${includeAnswered})...`);
    
    try {
        if (includeAnswered) {
            return getWbAllFeedbacksWithPagination(apiKey, store);
        } else {
            return getWbUnansweredFeedbacksWithPagination(apiKey, store);
        }
    } catch (e) {
        log(`[WB] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: ${e.stack}`);
        return [];
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ (–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ + –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ) —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
function getWbAllFeedbacksWithPagination(apiKey, store = null) {
    log(`[WB] –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –æ—Ç–∑—ã–≤–æ–≤ (–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ + –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ) —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π...`);
    
    const answeredFeedbacks = getWbFeedbacksByType(apiKey, true, store);   // isAnswered=true
    const unansweredFeedbacks = getWbFeedbacksByType(apiKey, false, store); // isAnswered=false
    
    const allFeedbacks = [...answeredFeedbacks, ...unansweredFeedbacks];
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
    const uniqueFeedbacks = [];
    const seenIds = new Set();
    allFeedbacks.forEach(fb => {
        if (!seenIds.has(fb.id)) {
            seenIds.add(fb.id);
            uniqueFeedbacks.push(fb);
        }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    uniqueFeedbacks.sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate));
    
    log(`[WB] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${uniqueFeedbacks.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ: ${answeredFeedbacks.length}, –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ: ${unansweredFeedbacks.length})`);
    return uniqueFeedbacks;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
function getWbUnansweredFeedbacksWithPagination(apiKey, store = null) {
    log(`[WB] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ù–ï–û–¢–í–ï–ß–ï–ù–ù–´–• –æ—Ç–∑—ã–≤–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π...`);
    return getWbFeedbacksByType(apiKey, false, store);
}

/**
 * –Ø–î–†–û –ü–ê–ì–ò–ù–ê–¶–ò–ò: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å –ø–æ–ª–Ω—ã–º –ø–µ—Ä–µ–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü
 * @param {string} apiKey - API –∫–ª—é—á
 * @param {boolean} isAnswered - true –¥–ª—è –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö, false –¥–ª—è –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö
 * @param {Object} store - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
 * @returns {Array} –í—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ—Ç–∑—ã–≤—ã
 */
function getWbFeedbacksByType(apiKey, isAnswered, store = null) {
    const type = isAnswered ? '–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ' : '–Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ';
    log(`[WB] üìñ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è ${type} –æ—Ç–∑—ã–≤–æ–≤...`);
    
    let allFeedbacks = [];
    let currentSkip = 0;
    let pageNumber = 1;
    const take = WB_CONFIG.API_LIMITS.PAGINATION_STEP; // 100 –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const maxPages = 100; // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (10,000 –æ—Ç–∑—ã–≤–æ–≤ –º–∞–∫—Å–∏–º—É–º)
    let consecutiveEmptyPages = 0; // –°—á–µ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–¥—Ä—è–¥
    
    while (pageNumber <= maxPages) {
        log(`[WB] üìÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ${pageNumber} (skip=${currentSkip}, take=${take})...`);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –º–∞–≥–∞–∑–∏–Ω–∞
        let url = `https://feedbacks-api.wildberries.ru/api/v1/feedbacks?isAnswered=${isAnswered}&take=${take}&skip=${currentSkip}&order=dateDesc`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ startDate —É –º–∞–≥–∞–∑–∏–Ω–∞
        if (store && store.settings && store.settings.startDate) {
            const startDate = store.settings.startDate; // –§–æ—Ä–º–∞—Ç: YYYY-MM-DD
            const today = new Date().toISOString().split('T')[0]; // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –≤ YYYY-MM-DD
            
            const dateFrom = getUnixTimestamp(startDate);
            const dateTo = getUnixTimestamp(today);
            
            url += `&dateFrom=${dateFrom}&dateTo=${dateTo}`;
            log(`[WB] üóìÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –¥–∞—Ç –º–∞–≥–∞–∑–∏–Ω–∞: ${startDate} - ${today} (Unix: ${dateFrom} - ${dateTo})`);
        } else {
            log(`[WB] üóìÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–∑—ã–≤—ã`);
        }
        
        try {
            const response = UrlFetchApp.fetch(url, { 
                method: 'GET', 
                headers: { 'Authorization': apiKey }, 
                muteHttpExceptions: true 
            });
            
            const responseCode = response.getResponseCode();
            const responseBody = response.getContentText();
            
            // –†–ê–°–®–ò–†–ï–ù–ù–´–ï –õ–û–ì–ò API –û–¢–í–ï–¢–û–í
            log(`[WB] üåê API –æ—Ç–≤–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber}: –∫–æ–¥ ${responseCode}, —Ä–∞–∑–º–µ—Ä —Ç–µ–ª–∞ ${responseBody.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            
            if (responseCode !== 200) {
                log(`[WB] ‚ùå –û–®–ò–ë–ö–ê –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNumber}: –ö–æ–¥ ${responseCode}. –¢–µ–ª–æ: ${responseBody.substring(0, 500)}`);
                break;
            }
            
            const json = JSON.parse(responseBody);
            if (json.error) {
                log(`[WB] ‚ùå API –û–®–ò–ë–ö–ê –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNumber}: ${json.errorText}. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: ${JSON.stringify(json)}`);
                break;
            }
            
            const pageFeedbacks = json.data?.feedbacks || [];
            const totalInResponse = json.data?.countUnanswered || json.data?.countAll || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            log(`[WB] üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber}: –ø–æ–ª—É—á–µ–Ω–æ ${pageFeedbacks.length} –æ—Ç–∑—ã–≤–æ–≤ (–≤—Å–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ: ${totalInResponse})`);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 0 –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ä–∞–Ω–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö!
            // WB API –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—É—Å—Ç—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑-–∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ isAnswered
            if (pageFeedbacks.length === 0) {
                consecutiveEmptyPages++;
                log(`[WB] ‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} (${consecutiveEmptyPages} –ø–æ–¥—Ä—è–¥ –∏–∑ –º–∞–∫—Å–∏–º—É–º 5)`);
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º 5 –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–¥—Ä—è–¥ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–≤—É—é!)
                if (consecutiveEmptyPages >= 5) {
                    log(`[WB] ‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${consecutiveEmptyPages} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–¥—Ä—è–¥ - –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö`);
                    break;
                }
                
                log(`[WB] ‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNumber + 1} (–ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ ${consecutiveEmptyPages} –ø—É—Å—Ç—ã—Ö)...`);
                currentSkip += take;
                pageNumber++;
                Utilities.sleep(200);
                continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            } else {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                if (consecutiveEmptyPages > 0) {
                    log(`[WB] üéØ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNumber}! –°–±—Ä–∞—Å—ã–≤–∞—é —Å—á–µ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–±—ã–ª–æ ${consecutiveEmptyPages})`);
                }
                consecutiveEmptyPages = 0;
            }
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã
            const processedFeedbacks = [];
            let emptyReviewsCount = 0;
            
            pageFeedbacks.forEach(fb => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏
                const hasText = fb.text && fb.text.trim() && fb.text.trim() !== '(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)';
                
                if (!hasText) {
                    emptyReviewsCount++;
                    if (isDevMode()) {
                        log(`[WB DEBUG] ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤ ID ${fb.id}: —Ç–µ–∫—Å—Ç="${fb.text || '(–Ω–µ—Ç)'}"`);
                    }
                    return;
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤ —Å —Ç–µ–∫—Å—Ç–æ–º
                const actualRating = fb.rating || fb.productValuation || 0;
                
                if (isDevMode()) {
                    const dataType = fb.rating ? '–û–¢–ó–´–í+–û–¶–ï–ù–ö–ê' : '–¢–û–õ–¨–ö–û_–û–¶–ï–ù–ö–ê_–¢–û–í–ê–†–ê';
                    log(`[WB DEBUG] ‚úÖ ID ${fb.id}: ${dataType}, rating=${fb.rating}, –∏—Å–ø–æ–ª—å–∑—É–µ–º=${actualRating}`);
                }
                
                processedFeedbacks.push({
                    id: fb.id,
                    createdDate: fb.createdDate,
                    rating: actualRating,
                    text: fb.text,
                    user: 'N/A',
                    product: {
                        id: fb.productDetails.nmId,
                        name: fb.productDetails.productName,
                        url: `https://www.wildberries.ru/catalog/${fb.productDetails.nmId}/detail.aspx`
                    }
                });
            });
            
            log(`[WB] üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedFeedbacks.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${emptyReviewsCount} –ø—É—Å—Ç—ã—Ö`);
            
            allFeedbacks = allFeedbacks.concat(processedFeedbacks);
            
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –æ—Ç–∑—ã–≤–æ–≤ —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if (pageFeedbacks.length < take) {
                log(`[WB] ‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber}: –ø–æ–ª—É—á–µ–Ω–æ ${pageFeedbacks.length} < ${take}`);
                break;
            }
            
            currentSkip += take;
            pageNumber++;
            
            // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï RPS –õ–ò–ú–ò–¢–´: WB = 400–º—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (3 RPS)
            Utilities.sleep(400);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if (pageNumber % 10 === 0) {
                log(`[WB] üí§ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ ${pageNumber} —Å—Ç—Ä–∞–Ω–∏—Ü...`);
                Utilities.sleep(2000);
            }
            
        } catch (e) {
            log(`[WB] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNumber}: ${e.message}`);
            break;
        }
    }
    
    if (pageNumber > maxPages) {
        log(`[WB] ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü (${maxPages})`);
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    allFeedbacks.sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate));
    
    // ‚úÖ –û–ë–û–ì–ê–©–ê–ï–ú –ù–ê–ó–í–ê–ù–ò–Ø–ú–ò –¢–û–í–ê–†–û–í –∏–∑ Content API
    if (allFeedbacks.length > 0 && store && store.credentials && store.credentials.apiKey) {
        const nmIds = allFeedbacks.map(fb => fb.product.id).filter(id => id);
        const productNames = getWbProductNames(nmIds, store.credentials.apiKey);
        
        if (Object.keys(productNames).length > 0) {
            allFeedbacks.forEach(fb => {
                if (productNames[fb.product.id]) {
                    fb.product.name = productNames[fb.product.id];
                }
            });
            log(`[WB] üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${Object.keys(productNames).length} –æ—Ç–∑—ã–≤–æ–≤`);
        }
    }
    
    log(`[WB] üéØ –ò–¢–û–ì–û –¥–ª—è ${type}: –ø–æ–ª—É—á–µ–Ω–æ ${allFeedbacks.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ ${pageNumber - 1} —Å—Ç—Ä–∞–Ω–∏—Ü`);
    return allFeedbacks;
}

// ============ HELPER FUNCTIONS FOR API TESTING ============
function testWbContentApiAccess(apiKey) {
  try {
    const url = 'https://suppliers-api.wildberries.ru/content/v2/cards/cursor/list';
    const payload = { limit: 1 }; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç-–∑–∞–ø—Ä–æ—Å
    
    const response = UrlFetchApp.fetch(url, {
      method: 'POST',
      headers: { 
        'Authorization': apiKey,
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });
    
    const code = response.getResponseCode();
    log(`[WB Content API Test] –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${code}`);
    
    return code === 200;
  } catch (e) {
    log(`[WB Content API Test] –û—à–∏–±–∫–∞: ${e.message}`);
    return false;
  }
}

function testOzonProductApiAccess(clientId, apiKey) {
  try {
    const url = 'https://api-seller.ozon.ru/v3/product/list';
    const payload = { limit: 1, last_id: "", filter: {} }; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç-–∑–∞–ø—Ä–æ—Å
    
    const response = UrlFetchApp.fetch(url, {
      method: 'POST',
      headers: { 
        'Client-Id': clientId,
        'Api-Key': apiKey,
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });
    
    const code = response.getResponseCode();
    log(`[Ozon Product API Test] –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${code}`);
    
    return code === 200;
  } catch (e) {
    log(`[Ozon Product API Test] –û—à–∏–±–∫–∞: ${e.message}`);
    return false;
  }
}

// ============ CONNECTION TESTER ============
function testStoreConnection(credentials, marketplace) {
  log(`[–¢–µ—Å—Ç] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è ${marketplace}.`);
  if (!marketplace) {
    return { success: false, message: '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å.' };
  }
  try {
    if (marketplace === 'Wildberries') {
      if (!credentials.apiKey) return { success: false, message: 'API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω.' };
      
      // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞
      if (!credentials.apiKey.trim() || credentials.apiKey.length < 10) {
        return { success: false, message: 'API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π.' };
      }
      
      const url = 'https://feedbacks-api.wildberries.ru/api/v1/feedbacks?isAnswered=false&take=1&skip=0';
      const response = UrlFetchApp.fetch(url, { method: 'GET', headers: { 'Authorization': credentials.apiKey }, muteHttpExceptions: true });
      const code = response.getResponseCode();
      const responseBody = response.getContentText();
      
      log(`[–¢–µ—Å—Ç WB] –û—Ç–≤–µ—Ç: ${code}. –¢–µ–ª–æ: ${responseBody.substring(0, 200)}...`);
      
      if (code === 200) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º Content API –¥–æ—Å—Ç—É–ø
        const contentTestResult = testWbContentApiAccess(credentials.apiKey);
        const mainMessage = '–£—Å–ø–µ—à–Ω–æ! –ö–ª—é—á –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º –æ—Ç–∑—ã–≤–∞–º.';
        if (contentTestResult) {
          return { success: true, message: mainMessage + ' Content API —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω.' };
        } else {
          return { success: true, message: mainMessage + ' ‚ö†Ô∏è Content API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –±—É–¥—É—Ç "–ù–µ —É–∫–∞–∑–∞–Ω–æ".' };
        }
      }
      if (code === 401) return { success: false, message: '–û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á.' };
      if (code === 403) return { success: false, message: '–û—à–∏–±–∫–∞ 403: API –∫–ª—é—á –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π.' };
      if (code === 429) return { success: false, message: '–û—à–∏–±–∫–∞ 429: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' };
      return { success: false, message: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${code}. ${responseBody.substring(0, 100)}...` };
    } else if (marketplace === 'Ozon') {
      if (!credentials.clientId || !credentials.apiKey) return { success: false, message: 'Client ID –∏ API Key –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã.' };
      
      // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–µ–π
      if (!credentials.clientId.trim() || credentials.clientId.length < 5) {
        return { success: false, message: 'Client ID —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π.' };
      }
      if (!credentials.apiKey.trim() || credentials.apiKey.length < 10) {
        return { success: false, message: 'API Key —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π.' };
      }
      
      const url = 'https://api-seller.ozon.ru/v1/review/list';
      const payload = { limit: 20 };
      const response = UrlFetchApp.fetch(url, {
        method: 'POST',
        headers: { 'Client-Id': credentials.clientId, 'Api-Key': credentials.apiKey },
        contentType: 'application/json',
        payload: JSON.stringify(payload),
        muteHttpExceptions: true
      });
      const code = response.getResponseCode();
      const responseBody = response.getContentText();
      log(`[–¢–µ—Å—Ç Ozon] –û—Ç–≤–µ—Ç: ${code}. –¢–µ–ª–æ: ${responseBody.substring(0, 300)}...`);
      
      if (code === 200) {
        try {
          const json = JSON.parse(responseBody);
          // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
          if (json.reviews !== undefined || (json.result && json.result.reviews) || (json.data && json.data.reviews)) {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º Product API –¥–æ—Å—Ç—É–ø
            const productTestResult = testOzonProductApiAccess(credentials.clientId, credentials.apiKey);
            const mainMessage = '–£—Å–ø–µ—à–Ω–æ! –ö–ª—é—á–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–∑—ã–≤–∞–º.';
            if (productTestResult) {
              return { success: true, message: mainMessage + ' Product API —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω.' };
            } else {
              return { success: true, message: mainMessage + ' ‚ö†Ô∏è Product API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –±—É–¥—É—Ç "–ù–µ —É–∫–∞–∑–∞–Ω–æ".' };
            }
          } else {
            return { success: false, message: 'API –∏–∑–º–µ–Ω–∏–ª—Å—è: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ª—É—á–µ–Ω—ã –∫–ª—é—á–∏: ' + Object.keys(json).join(', ') };
          }
        } catch (e) {
          return { success: false, message: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: ' + e.message };
        }
      }
      if (code === 401) return { success: false, message: '–û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π Api-Key –∏–ª–∏ Client-Id.' };
      if (code === 403) {
        try {
          const json = JSON.parse(responseBody);
          return { success: false, message: `–û—à–∏–±–∫–∞ 403: ${json.message || '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ API –∫–ª—é—á–∞.'}` };
        } catch (e) {
          return { success: false, message: '–û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Client-Id –∏ API Key.' };
        }
      }
      if (code === 404) return { success: false, message: '–û—à–∏–±–∫–∞ 404: –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∑–∞–ø—Ä–æ—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, API Ozon –∏–∑–º–µ–Ω–∏–ª—Å—è.' };
      if (code === 429) return { success: false, message: '–û—à–∏–±–∫–∞ 429: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' };
      if (code >= 500) return { success: false, message: `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Ozon (${code}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.` };
      return { success: false, message: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${code}. ${responseBody.substring(0, 100)}...` };
    }
    return { success: false, message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å.' };
  } catch (e) {
    log(`[–¢–µ—Å—Ç] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${e.stack}`);
    return { success: false, message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e.message}` };
  }
}

// ============ LOGGING & INITIAL SETUP ============
function log(message) {
  try {
    const logSheet = createOrGetLogSheet_();
    const timestamp = new Date().toLocaleString('ru-RU', { hour12: false });
    logSheet.insertRowBefore(2).getRange(2, 1, 1, 2).setValues([[timestamp, message]]);
    
    const lastRow = logSheet.getLastRow();
    if (lastRow > CONFIG.LOG_MAX_ROWS) {
      logSheet.deleteRows(CONFIG.LOG_MAX_ROWS + 1, lastRow - CONFIG.LOG_MAX_ROWS);
    }
  } catch (e) {
    console.error(`Failed to write to log sheet: ${e.stack}. Log message was: "${message}".`);
  }
}

function createOrGetLogSheet_() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName(CONFIG.LOG_SHEET_NAME);
  if (!sheet) {
    sheet = ss.insertSheet(CONFIG.LOG_SHEET_NAME, ss.getNumSheets());
    sheet.getRange('A1:B1').setValues([['–í—Ä–µ–º—è', '–°–æ–æ–±—â–µ–Ω–∏–µ']])
           .setFontWeight('bold').setBackground('#f3f3f3');
    sheet.setColumnWidth(1, 150);
    sheet.setColumnWidth(2, 800);
    sheet.hideSheet();
  }
  return sheet;
}

function toggleLogSheet() {
  const sheet = createOrGetLogSheet_();
  if (sheet.isSheetHidden()) {
    sheet.showSheet();
    SpreadsheetApp.getActiveSpreadsheet().setActiveSheet(sheet);
  } else {
    sheet.hideSheet();
  }
}

function initialSetup() {
  log('–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
  const templateSheet = createOrGetSheet(CONFIG.SHEETS.TEMPLATES, ['–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞', '–î–ª—è –æ—Ü–µ–Ω–∫–∏ (4, 5, –∏–ª–∏ 4-5)']);
  fillInitialTemplates();
  updateDevModeStatus();
  log('–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
  SpreadsheetApp.getUi().alert('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', `–°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç "${CONFIG.SHEETS.TEMPLATES}" –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.`, SpreadsheetApp.getUi().ButtonSet.OK);
}

// ============ UI FUNCTIONS ============
function showStoreManagerSidebar() {
  const html = HtmlService.createTemplateFromFile('StoreManagerSidebar').evaluate().setTitle('üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏').setWidth(450);
  SpreadsheetApp.getUi().showSidebar(html);
}

function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

// ============ SORTING FUNCTION ============
/**
 * Sorts a sheet by date column (newest first)
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - The sheet to sort
 */
function sortSheetByDate(sheet) {
  if (sheet.getLastRow() <= 2) return; // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
  
  const dateColumnIndex = CONFIG.HEADERS.indexOf('–î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞') + 1;
  if (dateColumnIndex === 0) {
    log('–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü "–î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞" –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.');
    return;
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (–∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫) –ø–æ —Å—Ç–æ–ª–±—Ü—É —Å –¥–∞—Ç–æ–π –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ
  const range = sheet.getRange(2, 1, sheet.getLastRow() - 1, CONFIG.HEADERS.length);
  range.sort([{column: dateColumnIndex, ascending: false}]);
}

// ============ DATE FILTERING FUNCTION ============
/**
 * Filters feedbacks based on store's start date setting
 * @param {Array} feedbacks - Array of feedback objects
 * @param {Object} store - Store configuration with settings
 * @returns {Array} Filtered feedbacks
 */
function filterFeedbacksByDate(feedbacks, store) {
  if (!store.settings || !store.settings.startDate) {
    return feedbacks; // No date filter, return all feedbacks
  }
  
  const startDate = new Date(store.settings.startDate);
  if (isNaN(startDate.getTime())) {
    log(`[${store.name}] –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤: ${store.settings.startDate}. –§–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω.`);
    return feedbacks;
  }
  
  // Check if start date is in the future
  const today = new Date();
  today.setHours(0, 0, 0, 0); // Reset to start of day for fair comparison
  
  if (startDate > today) {
    log(`[${store.name}] –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ (${store.settings.startDate}) –≤ –±—É–¥—É—â–µ–º! –í—Å–µ –æ—Ç–∑—ã–≤—ã –±—É–¥—É—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞.`);
    // Continue with filtering but add the warning
  }
  
  const filteredFeedbacks = feedbacks.filter(feedback => {
    const feedbackDate = new Date(feedback.createdDate);
    return feedbackDate >= startDate;
  });
  
  if (filteredFeedbacks.length !== feedbacks.length) {
    log(`[${store.name}] –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ: –æ—Å—Ç–∞–ª–æ—Å—å ${filteredFeedbacks.length} –∏–∑ ${feedbacks.length} –æ—Ç–∑—ã–≤–æ–≤ (–Ω–∞—á–∏–Ω–∞—è —Å ${store.settings.startDate}).`);
    
    // Additional warning if no feedbacks remain and start date is future
    if (filteredFeedbacks.length === 0 && startDate > today) {
      log(`[${store.name}] ‚ùå –í–ù–ò–ú–ê–ù–ò–ï: –î–∞—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–µ–º! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–∞–≥–∞–∑–∏–Ω–∞.`);
    }
  }
  
  return filteredFeedbacks;
}

// ============ RATING FILTERING FUNCTION ============
/**
 * Filters feedbacks to include only 4 and 5 star reviews
 * @param {Array} feedbacks - Array of feedback objects
 * @param {Object} store - Store configuration
 * @returns {Array} Filtered feedbacks (only 4-5 stars)
 */
function filterFeedbacksByRating(feedbacks, store) {
  const originalCount = feedbacks.length;
  const targetRatings = [4, 5]; // Only 4 and 5 star reviews
  
  const filteredFeedbacks = feedbacks.filter(feedback => {
    return targetRatings.includes(feedback.rating);
  });
  
  if (filteredFeedbacks.length !== originalCount) {
    const filtered = originalCount - filteredFeedbacks.length;
    log(`[${store.name}] –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (4-5 –∑–≤–µ–∑–¥): –æ—Å—Ç–∞–ª–æ—Å—å ${filteredFeedbacks.length} –∏–∑ ${originalCount} –æ—Ç–∑—ã–≤–æ–≤ (–∏—Å–∫–ª—é—á–µ–Ω–æ ${filtered} –æ—Ç–∑—ã–≤–æ–≤ —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º).`);
  }
  
  return filteredFeedbacks;
}

// ============ EMPTY REVIEW FILTERING FUNCTION ============
/**
 * Filters out reviews without meaningful text content
 * @param {Array} feedbacks - Array of feedback objects
 * @param {Object} store - Store configuration
 * @returns {Array} Filtered feedbacks (only those with meaningful text)
 */
function filterFeedbacksByContent(feedbacks, store) {
  const originalCount = feedbacks.length;
  
  const filteredFeedbacks = feedbacks.filter(feedback => {
    const text = (feedback.text || '').trim();
    
    // Skip reviews with no text or very short text
    if (!text || text === '(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)' || text.length < CONFIG.MIN_REVIEW_TEXT_LENGTH) {
      if (isDevMode()) {
        log(`[${store.marketplace} DEBUG] –ü—Ä–æ–ø—É—â–µ–Ω –æ—Ç–∑—ã–≤ ID ${feedback.id}: –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç ("${text}")`);
      }
      return false;
    }
    
    return true;
  });
  
  if (filteredFeedbacks.length !== originalCount) {
    const skippedCount = originalCount - filteredFeedbacks.length;
    log(`[${store.name}] –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é: –æ—Å—Ç–∞–ª–æ—Å—å ${filteredFeedbacks.length} –∏–∑ ${originalCount} –æ—Ç–∑—ã–≤–æ–≤ (–∏—Å–∫–ª—é—á–µ–Ω–æ ${skippedCount} –ø—É—Å—Ç—ã—Ö –æ—Ç–∑—ã–≤–æ–≤).`);
  }
  
  return filteredFeedbacks;
}

// ============ CORE PROCESSING LOGIC ============

/**
 * Main function to process new feedback for all active stores.
 */
function processAllStores() {
  const devMode = isDevMode();
  log(`--- –ó–ê–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò (${devMode ? '–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê' : '–ë–û–ï–í–û–ô –†–ï–ñ–ò–ú'}) ---`);
  const allStores = getStores();
  const activeStores = allStores.filter(store => store.isActive);
  if (activeStores.length === 0) {
    log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.');
    return;
  }
  
  log(`–ù–∞–π–¥–µ–Ω–æ ${activeStores.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤.`);
  activeStores.forEach(store => {
    log(`--- –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞–≥–∞–∑–∏–Ω–∞: ${store.name} [${store.marketplace}] ---`);
    processSingleStore(store, devMode);
    log(`--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞: ${store.name} ---`);
  });
  log('--- –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –ú–ê–ì–ê–ó–ò–ù–û–í –ó–ê–í–ï–†–®–ï–ù–ê ---');
}

function processSingleStore(store, devMode) {
  const sheet = createOrGetSheet(`–û—Ç–∑—ã–≤—ã (${store.name})`, CONFIG.HEADERS);
  const processedIds = getProcessedIdsFromSheet(sheet);
  const templates = getTemplates();
  if (templates.length === 0) {
      log(`[${store.name}] –û–®–ò–ë–ö–ê: –ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.`);
      return;
  }
  
  const includeAnswered = store.settings?.includeAnswered || false;
  log(`[${store.name}] –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ (${includeAnswered ? '–í–°–ï –æ—Ç–∑—ã–≤—ã' : '—Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ'})...`);
  let feedbacks = (store.marketplace === 'Wildberries') 
      ? getWbFeedbacks(store.credentials.apiKey, includeAnswered, store) 
      : getOzonFeedbacks(store.credentials.clientId, store.credentials.apiKey, includeAnswered, store);
      
  if (!feedbacks || feedbacks.length === 0) { 
      log(`[${store.name}] –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
      return;
  }
  
  log(`[${store.name}] –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ ${feedbacks.length} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.`);
  
  // Apply content filter first - remove empty reviews
  feedbacks = filterFeedbacksByContent(feedbacks, store);
  
  // Apply date filter
  feedbacks = filterFeedbacksByDate(feedbacks, store);
  
  // Apply rating filter - only 4 and 5 star reviews
  feedbacks = filterFeedbacksByRating(feedbacks, store);
  
  const newFeedbacks = feedbacks.filter(fb => !processedIds.has(fb.id));
  log(`[${store.name}] –ò–∑ –Ω–∏—Ö ${newFeedbacks.length} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã—Ö (–Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ).`);
  if (newFeedbacks.length === 0) return;

  const rowsToAppend = [];
  
  newFeedbacks.slice(0, CONFIG.MAX_FEEDBACKS_PER_RUN).forEach(feedback => {
    let rowData = [
        feedback.id, new Date(feedback.createdDate), feedback.product.id, 
        feedback.product.name, feedback.product.url, feedback.rating, 
        feedback.text
      ];

    if (!CONFIG.RESPOND_TO_RATINGS.includes(feedback.rating)) {
      rowData.push('', CONFIG.STATUS.SKIPPED_RATING, `–†–µ–π—Ç–∏–Ω–≥ ${feedback.rating} –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.`, '');
      rowsToAppend.push(rowData);
      log(`[${store.name}] –ü—Ä–æ–ø—É—â–µ–Ω –æ—Ç–∑—ã–≤ ID: ${feedback.id} (—Ä–µ–π—Ç–∏–Ω–≥ ${feedback.rating}). –°—Å—ã–ª–∫–∞: ${feedback.product.url}`);
      return;
    }
      
    const template = selectRandomTemplate(templates, feedback.rating);
    if (!template) {
      rowData.push('', CONFIG.STATUS.NO_TEMPLATE, `–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ${feedback.rating}.`, '');
      rowsToAppend.push(rowData);
      log(`[${store.name}] –ù–µ—Ç —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞ ID: ${feedback.id} (—Ä–µ–π—Ç–∏–Ω–≥ ${feedback.rating}). –°—Å—ã–ª–∫–∞: ${feedback.product.url}`);
      return;
    }

    if (devMode) {
      rowData.push(template, CONFIG.STATUS.PENDING, '', '');
      rowsToAppend.push(rowData);
      log(`[${store.name}] DEV: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ ID: ${feedback.id}. –°—Å—ã–ª–∫–∞: ${feedback.product.url}`);
    } else {
      // Production mode: send answer immediately
      const result = sendAnswer(store, feedback.id, template);
      rowData.push(template, result.status, result.error, result.timestamp);
      rowsToAppend.push(rowData);
      log(`[${store.name}] PROD: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è ID: ${feedback.id}. –°—Ç–∞—Ç—É—Å: ${result.status}. –°—Å—ã–ª–∫–∞: ${feedback.product.url}`);
      Utilities.sleep(CONFIG.DELAY_BETWEEN_REQUESTS);
    }
  });
  
  if (rowsToAppend.length > 0) {
    sheet.getRange(sheet.getLastRow() + 1, 1, rowsToAppend.length, CONFIG.HEADERS.length).setValues(rowsToAppend);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ - –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –Ω–∞–≤–µ—Ä—Ö
    sortSheetByDate(sheet);
    log(`[${store.name}] –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –Ω–∞–≤–µ—Ä—Ö—É).`);
  }
}

/**
 * Sends all pending answers from all store sheets.
 */
function sendPendingAnswers() {
  log('--- –ó–ê–ü–£–°–ö –û–¢–ü–†–ê–í–ö–ò –ü–û–î–ì–û–¢–û–í–õ–ï–ù–ù–´–• –û–¢–í–ï–¢–û–í ---');
  const allStores = getStores().filter(s => s.isActive);
  
  allStores.forEach(store => {
    log(`--- –ü—Ä–æ–≤–µ—Ä—è—é –º–∞–≥–∞–∑–∏–Ω: ${store.name} ---`);
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`–û—Ç–∑—ã–≤—ã (${store.name})`);
    if (!sheet) return;

    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    const statusCol = headers.indexOf('–°—Ç–∞—Ç—É—Å') + 1;
    const answerCol = headers.indexOf('–ü–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç') + 1;
    const idCol = headers.indexOf('ID –æ—Ç–∑—ã–≤–∞') + 1;
    const errorCol = headers.indexOf('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏') + 1;
    const timeCol = headers.indexOf('–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏') + 1;
    const linkCol = headers.indexOf('–°—Å—ã–ª–∫–∞') + 1;

    if (statusCol === 0) {
        log(`[${store.name}] –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü "–°—Ç–∞—Ç—É—Å".`);
        return;
    }

    let sentCount = 0;
    let successCount = 0;
    for (let i = 1; i < data.length; i++) {
      if (data[i][statusCol - 1] === CONFIG.STATUS.PENDING) {
        const feedbackId = data[i][idCol - 1];
        const answerText = data[i][answerCol - 1];
        const reviewLink = data[i][linkCol - 1] || '';
        
        const result = sendAnswer(store, feedbackId, answerText);
        
        sheet.getRange(i + 1, statusCol).setValue(result.status);
        sheet.getRange(i + 1, errorCol).setValue(result.error);
        sheet.getRange(i + 1, timeCol).setValue(result.timestamp);
        
        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º API
        let logMessage = `[${store.name}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è ID ${feedbackId}. –°—Ç–∞—Ç—É—Å: ${result.status}${reviewLink ? '. –°—Å—ã–ª–∫–∞: ' + reviewLink : ''}`;
        if (result.apiResponse) {
          logMessage += `. –û—Ç–≤–µ—Ç API: ${result.apiResponse}`;
        }
        log(logMessage);
        
        sentCount++;
        if (result.status === CONFIG.STATUS.SENT) {
          successCount++;
        }
        Utilities.sleep(CONFIG.DELAY_BETWEEN_REQUESTS);
      }
    }

    if (sentCount > 0) {
        log(`[${store.name}] –ü–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${sentCount}. –£—Å–ø–µ—à–Ω–æ: ${successCount}. –û—à–∏–±–æ–∫: ${sentCount - successCount}.`);
    } else {
        log(`[${store.name}] –ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏.`);
    }
  });
  log('--- –û–¢–ü–†–ê–í–ö–ê –ü–û–î–ì–û–¢–û–í–õ–ï–ù–ù–´–• –û–¢–í–ï–¢–û–í –ó–ê–í–ï–†–®–ï–ù–ê ---');
}

// ============ API-SPECIFIC FUNCTIONS ============

/**
 * Universal function to send answer to review
 * Routes to appropriate marketplace-specific function
 * @param {Object} store - Store configuration
 * @param {string} feedbackId - Review ID
 * @param {string} text - Answer text
 * @returns {Object} Result object with status, error, timestamp, and apiResponse
 */
function sendAnswer(store, feedbackId, text) {
  try {
    let success, message, apiResponse;
    if (store.marketplace === WB_CONFIG.MARKETPLACE_NAME) {
      [success, message, apiResponse] = sendWbFeedbackAnswer(feedbackId, text, store.credentials.apiKey);
    } else if (store.marketplace === OZON_CONFIG.MARKETPLACE_NAME) {
      [success, message, apiResponse] = sendOzonFeedbackAnswer(feedbackId, text, store.credentials.clientId, store.credentials.apiKey);
    } else {
      return { status: CONFIG.STATUS.ERROR, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', timestamp: '', apiResponse: '' };
    }
    
    if (success) {
      return { status: CONFIG.STATUS.SENT, error: '', timestamp: new Date(), apiResponse: apiResponse || 'OK' };
    } else {
      return { status: CONFIG.STATUS.ERROR, error: message, timestamp: new Date(), apiResponse: apiResponse || message };
    }
  } catch (e) {
    log(`–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è ID ${feedbackId}: ${e.stack}`);
    return { status: CONFIG.STATUS.ERROR, error: e.message, timestamp: new Date(), apiResponse: e.message };
  }
}

// ======================================================================
// ======================== WILDBERRIES API ============================
// ======================================================================
// –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å API Wildberries.
// –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
// ======================================================================

/**
 * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø WB: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ —Å –ü–û–õ–ù–û–ô –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π "–¥–æ –ø–æ–±–µ–¥–Ω–æ–≥–æ"!
 * @param {string} apiKey - WB API –∫–ª—é—á
 * @param {boolean} includeAnswered - –í–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
 * @param {Object} store - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
 */
function getWbFeedbacks(apiKey, includeAnswered = false, store = null) {
    log(`[WB] üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ê –ü–û–õ–ù–£–Æ –ü–ê–ì–ò–ù–ê–¶–ò–Æ! (–≤–∫–ª—é—á–∞—è –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ: ${includeAnswered})`);
    
    // –í–ê–ñ–ù–û: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π!
    return getWbFeedbacksWithFullPagination(apiKey, includeAnswered, store);
}

function sendWbFeedbackAnswer(feedbackId, text, apiKey) {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù WB API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Ç–∑—ã–≤—ã
    const url = `https://feedbacks-api.wildberries.ru/api/v1/feedbacks/answer`;
    const payload = { 
        id: feedbackId,  // ID –æ—Ç–∑—ã–≤–∞ –≤ payload
        text: text 
    };
    
    log(`[WB API] üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞: POST ${url}, payload: ${JSON.stringify(payload)}`);
    
    const response = UrlFetchApp.fetch(url, {
        method: 'POST',  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù –º–µ—Ç–æ–¥ –Ω–∞ POST 
        headers: { 
            'Authorization': apiKey,
            'Content-Type': 'application/json'
        },
        payload: JSON.stringify(payload),
        muteHttpExceptions: true
    });
    
    const code = response.getResponseCode();
    const responseBody = response.getContentText();
    
    // Include detailed API response for debugging
    const success = code === 200;
    const errorMessage = success ? '' : `–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${code}. –¢–µ–ª–æ: ${responseBody}`;
    
    return [success, errorMessage, responseBody];
}

// ======================================================================
// ============================ OZON API ===============================
// ======================================================================
// –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å API Ozon.
// –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
// ======================================================================

/**
 * Fetches reviews from Ozon API
 * @param {string} clientId - Ozon Client ID
 * @param {string} apiKey - Ozon API Key
 * @param {boolean} includeAnswered - Whether to include answered reviews
 * @returns {Array} Array of normalized feedback objects
 */
function getOzonFeedbacks(clientId, apiKey, includeAnswered = false, store = null) {
    const url = 'https://api-seller.ozon.ru/v1/review/list';
    
    let payload = {
        filter: {
            has_text: true,  // –¢–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤—ã —Å —Ç–µ–∫—Å—Ç–æ–º
            has_answer: includeAnswered ? undefined : false,  // –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–≤–µ—Ç–∞–º
            status: includeAnswered ? ['MODERATED', 'NEW'] : ['MODERATED']  // –°—Ç–∞—Ç—É—Å—ã –æ—Ç–∑—ã–≤–æ–≤
        },
        sort: {
            field: 'CREATED_AT',
            direction: 'DESC'  // –ù–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏
        },
        page: 1,
        limit: OZON_CONFIG.API_LIMITS.MAX_LIMIT  // 100 - –º–∞–∫—Å–∏–º—É–º
    };

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    if (store && store.settings && store.settings.startDate) {
        const startDate = store.settings.startDate; // –§–æ—Ä–º–∞—Ç: YYYY-MM-DD
        const today = new Date().toISOString().split('T')[0]; // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –≤ YYYY-MM-DD
        
        const dateFrom = formatDateForOzon(startDate);
        const dateTo = formatDateForOzon(today);
        
        payload.filter.date_from = dateFrom;
        payload.filter.date_to = dateTo;
        
        log(`[Ozon] üóìÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –¥–∞—Ç –º–∞–≥–∞–∑–∏–Ω–∞: ${startDate} - ${today} (RFC3339: ${dateFrom} - ${dateTo})`);
    } else {
        log(`[Ozon] üóìÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–∑—ã–≤—ã`);
    }
    try {
        const response = UrlFetchApp.fetch(url, {
            method: 'POST', headers: { 'Client-Id': clientId, 'Api-Key': apiKey },
            contentType: 'application/json', payload: JSON.stringify(payload),
            muteHttpExceptions: true
        });
        const responseCode = response.getResponseCode();
        const responseBody = response.getContentText();
        if (responseCode !== 200) {
            log(`[Ozon] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã. –ö–æ–¥: ${responseCode}. –¢–µ–ª–æ: ${responseBody}`);
            return [];
        }

        const json = JSON.parse(responseBody);
        
        // ‚úÖ –£–õ–£–ß–®–ï–ù–ê –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –æ—Ç–≤–µ—Ç–∞ API
        let reviews = [];
        if (json.result && json.result.reviews) {
            reviews = json.result.reviews;
        } else if (json.reviews) {
            reviews = json.reviews;
        } else if (json.data && json.data.reviews) {
            reviews = json.data.reviews;
        } else {
            log(`[Ozon] ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞. –ö–ª—é—á–∏: ${Object.keys(json).join(', ')}. –û—Ç–≤–µ—Ç: ${responseBody.substring(0, 200)}...`);
            return [];
        }
        
        if (!Array.isArray(reviews)) {
            log(`[Ozon] –û–®–ò–ë–ö–ê: reviews –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º. –¢–∏–ø: ${typeof reviews}. –ó–Ω–∞—á–µ–Ω–∏–µ: ${JSON.stringify(reviews).substring(0, 100)}...`);
            return [];
        }

        log(`[Ozon] üìÑ –ü–æ–ª—É—á–µ–Ω–æ ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API`);

        // –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –ø–µ—Ä–≤—ã–º–∏) 
        reviews.sort((a, b) => new Date(b.created_at || b.published_at) - new Date(a.created_at || a.published_at));
        
        let processedReviews = reviews.map(fb => ({
            id: fb.id, 
            createdDate: fb.published_at, 
            rating: fb.rating,
            text: fb.text || '(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)', 
            user: '–ê–Ω–æ–Ω–∏–º', // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Ç–æ–¥–µ
            product: { 
              id: fb.sku || fb.offer_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º sku –∏–ª–∏ offer_id
              name: '–ù–µ —É–∫–∞–∑–∞–Ω–æ', // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∏–∂–µ —á–µ—Ä–µ–∑ Product API
              url: `https://www.ozon.ru/product/${fb.sku || fb.offer_id}`
            }
        }));
        
        // ‚úÖ –û–ë–û–ì–ê–©–ê–ï–ú –ù–ê–ó–í–ê–ù–ò–Ø–ú–ò –¢–û–í–ê–†–û–í –∏–∑ Product API
        if (processedReviews.length > 0 && store && store.credentials) {
            const offerIds = processedReviews.map(review => review.product.id).filter(id => id);
            const productNames = getOzonProductNames(offerIds, store.credentials.clientId, store.credentials.apiKey);
            
            if (Object.keys(productNames).length > 0) {
                processedReviews.forEach(review => {
                    if (productNames[review.product.id]) {
                        review.product.name = productNames[review.product.id];
                    }
                });
                log(`[Ozon] üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${Object.keys(productNames).length} –æ—Ç–∑—ã–≤–æ–≤`);
            }
        }
        
        return processedReviews;
    } catch (e) {
        log(`[Ozon] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–∑—ã–≤–æ–≤: ${e.stack}`);
        return [];
    }
}

function sendOzonFeedbackAnswer(feedbackId, text, clientId, apiKey) {
    const url = 'https://api-seller.ozon.ru/v1/review/comment/create';
    const payload = { review_id: feedbackId, text: text, mark_review_as_processed: true };
    
    const response = UrlFetchApp.fetch(url, {
        method: 'POST', 
        headers: { 'Client-Id': clientId, 'Api-Key': apiKey },
        contentType: 'application/json', 
        payload: JSON.stringify(payload),
        muteHttpExceptions: true
    });
    
    const code = response.getResponseCode();
    const responseBody = response.getContentText();
    
    // Include detailed API response for debugging
    const success = code === 200;
    const errorMessage = success ? '' : `–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${code}. –¢–µ–ª–æ: ${responseBody}`;
    
    return [success, errorMessage, responseBody];
}

// ============ DATA (STORE & TEMPLATE) MANAGEMENT ============
function getStores() {
  const storesJson = PropertiesService.getUserProperties().getProperty(CONFIG.PROPERTIES_KEY);
  if (!storesJson) return [];
  const stores = JSON.parse(storesJson);
  return stores.map(store => {
      if (typeof store.isActive === 'undefined') store.isActive = true;
      // Ensure settings object exists for backward compatibility
      if (!store.settings) store.settings = {};
      return store;
  });
}

function saveStore(store) {
  log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: ${store.name}${store.settings && store.settings.startDate ? ' (–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ' + store.settings.startDate + ')' : ''}`);
  const stores = getStores();
  const storeIndex = stores.findIndex(s => s.id === store.id);
  
  if (typeof store.isActive === 'undefined') store.isActive = true;
  // Ensure settings object exists
  if (!store.settings) store.settings = {};
  
  if (storeIndex > -1) {
    stores[storeIndex] = store; 
  } else {
    store.id = store.id || new Date().getTime().toString(); 
    stores.push(store); 
  }
  PropertiesService.getUserProperties().setProperty(CONFIG.PROPERTIES_KEY, JSON.stringify(stores));
  createOrGetSheet(`–û—Ç–∑—ã–≤—ã (${store.name})`, CONFIG.HEADERS);
  return getStores();
}

function deleteStore(storeId) {
  log(`–£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ —Å ID: ${storeId}`);
  let stores = getStores();
  stores = stores.filter(s => s.id !== storeId);
  PropertiesService.getUserProperties().setProperty(CONFIG.PROPERTIES_KEY, JSON.stringify(stores));
  return getStores();
}

function getTemplates() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(CONFIG.SHEETS.TEMPLATES);
  if (!sheet || sheet.getLastRow() < 2) return [];
  // Use getDisplayValues() to get the formatted string, not the underlying value (which can be a date)
  return sheet.getRange(2, 1, sheet.getLastRow() - 1, 2).getDisplayValues().map(row => ({ 
    text: row[0], 
    rating: row[1].trim()
  })).filter(t => t.text.trim() && t.rating);
}

function fillInitialTemplates() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(CONFIG.SHEETS.TEMPLATES);
  if (sheet.getLastRow() <= 1) {
    const templates = [
      ['–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –†–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! üòä', '5'],
      ['–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É! –ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞! ‚ù§Ô∏è', '5'],
      ['–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É! –í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!', '4-5'],
      ['–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤! –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!', '4']
    ];
    sheet.getRange(2, 1, templates.length, 2).setValues(templates);
  }
}

function createOrGetSheet(sheetName, headers) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName(sheetName);
  if (!sheet) {
    sheet = ss.insertSheet(sheetName);
    log(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç: "${sheetName}"`);
  }
  
  if (headers && headers.length > 0) {
    const currentHeaders = sheet.getRange(1, 1, 1, sheet.getMaxColumns()).getValues()[0];
    if (currentHeaders.join('') !== headers.join('')) {
        sheet.getRange(1, 1, 1, headers.length).setValues([headers]).setFontWeight('bold').setBackground('#4a86e8').setFontColor('#ffffff');
        sheet.setFrozenRows(1);
        headers.forEach((_, i) => sheet.autoResizeColumn(i + 1));
        log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ª–∏—Å—Ç–µ "${sheetName}".`);
    }
  }
  return sheet;
}

function selectRandomTemplate(templates, rating) {
  const suitable = templates.filter(t => {
      if (!t.rating) return false;
      if (t.rating.includes('-')) {
          const [min, max] = t.rating.split('-').map(Number);
          return rating >= min && rating <= max;
      }
      return Number(t.rating) === rating;
  });
  if (suitable.length === 0) return null;
  return suitable[Math.floor(Math.random() * suitable.length)].text;
}

function getProcessedIdsFromSheet(sheet) {
  if (sheet.getLastRow() < 2) return new Set();
  const idCol = CONFIG.HEADERS.indexOf('ID –æ—Ç–∑—ã–≤–∞') + 1;
  const ids = sheet.getRange(2, idCol, sheet.getLastRow() - 1, 1).getDisplayValues().flat();
  return new Set(ids.filter(id => id));
}

function manuallyDeleteReviewById() {
  const ui = SpreadsheetApp.getUi();
  const response = ui.prompt('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞', '–í–≤–µ–¥–∏—Ç–µ ID –æ—Ç–∑—ã–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ª–æ–≥–∞:', ui.ButtonSet.OK_CANCEL);
  if (response.getSelectedButton() !== ui.Button.OK || !response.getResponseText()) {
    log('–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    return;
  }

  const feedbackId = response.getResponseText().trim();
  log(`–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ —Å ID: ${feedbackId}`);
  const stores = getStores();
  let foundAndDeleted = false;

  stores.forEach(store => {
    const sheetName = `–û—Ç–∑—ã–≤—ã (${store.name})`;
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
    if (sheet && sheet.getLastRow() > 1) {
      const ids = sheet.getRange(2, 1, sheet.getLastRow() - 1, 1).getValues().flat();
      for (let i = ids.length - 1; i >= 0; i--) {
        if (String(ids[i]) == feedbackId) {
          log(`–ù–∞–π–¥–µ–Ω –æ—Ç–∑—ã–≤ ID ${feedbackId} –≤ "${store.name}" –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 2}. –£–¥–∞–ª—è—é.`);
          sheet.deleteRow(i + 2);
          foundAndDeleted = true;
          break;
        }
      }
    }
  });

  if (foundAndDeleted) {
    ui.alert('–£—Å–ø–µ—Ö', `–ó–∞–ø–∏—Å—å –æ–± –æ—Ç–∑—ã–≤–µ —Å ID "${feedbackId}" —É–¥–∞–ª–µ–Ω–∞.`);
  } else {
    ui.alert('–ù–µ –Ω–∞–π–¥–µ–Ω–æ', `–û—Ç–∑—ã–≤ —Å ID "${feedbackId}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
  }
}

// ============ TRIGGERS ============
function createTrigger(minutes) {
  deleteAllTriggers();
  ScriptApp.newTrigger('processAllStores').timeBased().everyMinutes(minutes).create();
  log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –Ω–∞ –∫–∞–∂–¥—ã–µ ${minutes} –º–∏–Ω—É—Ç.`);
  SpreadsheetApp.getUi().alert('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', `–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ ${minutes} –º–∏–Ω—É—Ç.`, SpreadsheetApp.getUi().ButtonSet.OK);
}

function createTrigger5Min() { createTrigger(5); }
function createTrigger30Min() { createTrigger(30); }
function createTrigger1Hour() { createTrigger(60); }

function deleteAllTriggers() {
  const triggers = ScriptApp.getProjectTriggers();
  let deletedCount = 0;
  triggers.forEach(trigger => {
    if (trigger.getHandlerFunction() === 'processAllStores') {
      ScriptApp.deleteTrigger(trigger);
      deletedCount++;
    }
  });
  if (deletedCount > 0) {
    log(`–£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞.`);
  }
}
