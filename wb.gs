// ============================================================================
// üî• –û–ö–¢–Ø–ë–†–¨ 2025: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –¥–ª—è WB API v1
// ‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–û: v2 endpoint –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ –¥–ª—è feedbacks!
// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û v1 endpoint —Å Unix timestamp –¥–ª—è –¥–∞—Ç
// ============================================================================

function buildWbApiV1Url(includeAnswered, skip, take, store) {
    const baseUrl = 'https://feedbacks-api.wildberries.ru/api/v1/feedbacks';
    const params = [];
    
    // üî• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–æ–∫—Ç—è–±—Ä—å 2025)
    params.push(`isAnswered=${includeAnswered}`);
    params.push(`take=${take}`);
    params.push(`skip=${skip}`);
    params.push(`order=dateDesc`);
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–∞—Ç–∞ –≤ Unix timestamp (—Å–µ–∫—É–Ω–¥—ã, –ù–ï —Å—Ç—Ä–æ–∫–∞!)
    if (store?.settings?.startDate) {
        try {
            const startDate = new Date(store.settings.startDate);
            const unixTimestamp = Math.floor(startDate.getTime() / 1000); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
            params.push(`dateFrom=${unixTimestamp}`);
            log(`[WB URL] üìÖ –î–∞—Ç–∞ Unix timestamp: ${unixTimestamp} (${store.settings.startDate})`);
        } catch (e) {
            log(`[WB URL] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã ${store.settings.startDate}: ${e.message}`);
        }
    }
    
    // üöÄ –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (store?.settings?.minRating) {
        params.push(`valuation=${store.settings.minRating}`);
        log(`[WB URL] ‚≠ê –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É: ${store.settings.minRating}`);
    }
    
    // üöÄ –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–≤–∞—Ä—É (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    if (store?.settings?.nmId) {
        params.push(`nmId=${store.settings.nmId}`);
        log(`[WB URL] üõçÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–≤–∞—Ä—É: ${store.settings.nmId}`);
    }
    
    const fullUrl = `${baseUrl}?${params.join('&')}`;
    log(`[WB URL] üîó Constructed URL: ${fullUrl}`);
    return fullUrl;
}

// ============================================================================
// üî• –û–ö–¢–Ø–ë–†–¨ 2025: –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è WB API v1 
// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB v1 API
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é take/skip —Å Unix timestamp –¥–ª—è –¥–∞—Ç
// ============================================================================

/**
 * @param {string} apiKey - WB API –∫–ª—é—á
 * @param {boolean} includeAnswered - –í–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã  
 * @param {Object} store - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
 */
function getWbFeedbacks(apiKey, includeAnswered = false, store = null) {
    const startTime = Date.now();
    log(`[WB] üî• WB API v1 START (includeAnswered=${includeAnswered}) - v1!`);
    log(`[WB] üì¶ Store: ${store?.name || 'null'}`);
    log(`[WB] üîë API Key length: ${apiKey?.length || 0} chars`);
    
    const MAX_TAKE = 5000; // –ú–∞–∫—Å–∏–º—É–º –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB API
    const MAX_SKIP = 199990; // –ú–∞–∫—Å–∏–º—É–º –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB API
    let allFeedbacks = [];
    let skip = 0;
    let hasMoreData = true;
    let pageCount = 0;
    let totalRequestTime = 0;
    
    try {
        while (hasMoreData && skip <= MAX_SKIP) {
            pageCount++;
            const pageStartTime = Date.now();
            
            // üî• –û–ö–¢–Ø–ë–†–¨ 2025: –∏—Å–ø–æ–ª—å–∑—É–µ–º v1 endpoint —Å Unix timestamp!
            const url = buildWbApiV1Url(includeAnswered, skip, MAX_TAKE, store);
            
            log(`[WB Request #${pageCount}] üì§ GET ${url}`);
            log(`[WB Request #${pageCount}] üìÑ Params: skip=${skip}, take=${MAX_TAKE}`);
            log(`[WB Request #${pageCount}] ‚è±Ô∏è Requesting...`);
            
            const requestStartTime = Date.now();
            const response = UrlFetchApp.fetch(url, { 
                method: 'GET', 
                headers: { 'Authorization': apiKey }, 
                muteHttpExceptions: true 
            });
            const requestDuration = Date.now() - requestStartTime;
            totalRequestTime += requestDuration;
            
            const responseCode = response.getResponseCode();
            const responseBody = response.getContentText();
            const responseSize = responseBody.length;
            
            log(`[WB Response #${pageCount}] üì• HTTP ${responseCode} (${requestDuration}ms, ${responseSize} bytes)`);
            
            // üî¥ –ù–û–í–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï #1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Response –æ–±—ä–µ–∫—Ç–µ
            if (isDevMode()) {
                log(`[WB Response #${pageCount} DEBUG] Response object info:`);
                log(`[WB Response #${pageCount} DEBUG]   Status: ${responseCode}`);
                log(`[WB Response #${pageCount} DEBUG]   Body length: ${responseSize} bytes`);
                log(`[WB Response #${pageCount} DEBUG]   First 300 chars: ${responseBody.substring(0, 300)}`);
            }
            
            if (responseCode !== 200) {
                log(`[WB Response #${pageCount}] ‚ùå ERROR: HTTP ${responseCode}`);
                log(`[WB Response #${pageCount}] üìù Body preview: ${responseBody.substring(0, 300)}...`);
                
                // Enhanced error diagnostics
                if (responseCode === 401) {
                    log(`[WB Response #${pageCount}] üîé 401 Unauthorized - Invalid API key`);
                } else if (responseCode === 403) {
                    log(`[WB Response #${pageCount}] üîé 403 Forbidden - API key lacks permissions`);
                } else if (responseCode === 404) {
                    log(`[WB Response #${pageCount}] üîé 404 Not Found - Check endpoint URL`);
                } else if (responseCode === 429) {
                    log(`[WB Response #${pageCount}] üîé 429 Rate Limited - Too many requests`);
                } else if (responseCode >= 500) {
                    log(`[WB Response #${pageCount}] üîé ${responseCode} Server Error - WB API issues`);
                }
                break;
            }
            
            let json;
            try {
                json = JSON.parse(responseBody);
                log(`[WB Response #${pageCount}] ‚úÖ Valid JSON parsed`);
                
                // üî¥ –ù–û–í–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï #2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON (in dev mode)
                if (isDevMode()) {
                    log(`[WB Response #${pageCount} DEBUG] JSON structure:`);
                    const rootKeys = Object.keys(json);
                    log(`[WB Response #${pageCount} DEBUG]   Root keys: ${rootKeys.join(', ')}`);
                    
                    if (json.data) {
                        const dataKeys = Object.keys(json.data);
                        log(`[WB Response #${pageCount} DEBUG]   data keys: ${dataKeys.join(', ')}`);
                        
                        // üî¥ –ù–û–í–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï #3: –ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ (200 —Å–∏–º–≤–æ–ª–æ–≤ –º–∞–∫—Å)
                        for (const k of dataKeys) {
                            let val = '';
                            try {
                                if (typeof json.data[k] === 'string') {
                                    val = json.data[k];
                                } else if (typeof json.data[k] === 'number' || typeof json.data[k] === 'boolean') {
                                    val = json.data[k].toString();
                                } else if (Array.isArray(json.data[k])) {
                                    val = `[Array: ${json.data[k].length} items]`;
                                } else if (typeof json.data[k] === 'object') {
                                    val = `[Object: ${Object.keys(json.data[k]).join(', ')}]`;
                                } else {
                                    val = String(json.data[k]);
                                }
                            } catch (e) {
                                val = '[ERROR parsing value]';
                            }
                            
                            const truncated = val.substring(0, 200);
                            const suffix = val.length > 200 ? ' ...[TRUNCATED]' : '';
                            log(`[WB Response #${pageCount} DEBUG]   data.${k} = "${truncated}"${suffix}`);
                        }
                    }
                }
                
            } catch (parseError) {
                log(`[WB Response #${pageCount}] ‚ùå JSON PARSE ERROR: ${parseError.message}`);
                log(`[WB Response #${pageCount}] üìù Raw body: ${responseBody.substring(0, 500)}`);
                break;
            }
            
            if (json.error) {
                log(`[WB Response #${pageCount}] ‚ùå API Error: ${json.errorText || json.error}`);
                break;
            }
            
            const feedbacks = json.data?.feedbacks || [];
            
            // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º countUnanswered –∏ –¥—Ä—É–≥–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
            const countUnanswered = json.data?.countUnanswered || 0;
            const countArchive = json.data?.countArchive || 0;
            
            log(`[WB Response #${pageCount}] üìä Feedbacks: ${feedbacks.length} total`);
            log(`[WB Response #${pageCount}] üìà –°—á–µ—Ç—á–∏–∫–∏: –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö=${countUnanswered}, –∞—Ä—Ö–∏–≤=${countArchive}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏
            if (countUnanswered > 0 && feedbacks.length === 0 && !includeAnswered) {
                log(`[WB Response #${pageCount}] ü§î –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: countUnanswered=${countUnanswered}, –Ω–æ feedbacks=0. –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –¥–∞—Ç!`);
            }
            
            if (feedbacks.length === 0) {
                log(`[WB Response #${pageCount}] ‚úÖ Empty page - pagination complete`);
                hasMoreData = false;
                break;
            }
            
            // üî¥ –ù–û–í–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï #4: Sample feedback –≤ dev mode
            if (isDevMode() && feedbacks.length > 0) {
                const sample = feedbacks;
                const sampleStr = JSON.stringify(sample).substring(0, 200);
                log(`[WB Response #${pageCount} DEBUG] Sample feedback: ${sampleStr}...`);
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã (—É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ)
            const newFeedbacks = feedbacks.map(fb => ({
                id: fb.id,
                createdDate: fb.createdDate,
                rating: fb.rating || fb.productValuation || 0,
                text: fb.text || '(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)',
                user: 'N/A',
                hasAnswer: !!(fb.answer && fb.answer.text),
                product: {
                    id: fb.productDetails?.nmId,
                    name: fb.productDetails?.productName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    url: `https://www.wildberries.ru/catalog/${fb.productDetails?.nmId}/detail.aspx`
                }
            }));

            allFeedbacks.push(...newFeedbacks);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            skip += MAX_TAKE;
            hasMoreData = (feedbacks.length === MAX_TAKE); // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –µ—â–µ
            
            const pageDuration = Date.now() - pageStartTime;
            log(`[WB Page #${pageCount}] ‚è±Ô∏è Completed in ${pageDuration}ms (collected ${feedbacks.length} feedbacks)`);

            // üî• –û–ö–¢–Ø–ë–†–¨ 2025: –û–ë–ù–û–í–õ–ï–ù–û rate limiting WB API - 333ms (3 req/sec)
            Utilities.sleep(333); // 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        }
        
        const totalDuration = Date.now() - startTime;
        const avgRequestTime = pageCount > 0 ? Math.round(totalRequestTime / pageCount) : 0;
        
        log(`[WB] ‚úÖ –ó–ê–í–ï–†–®–ï–ù–û: ${allFeedbacks.length} –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞ ${pageCount} –∑–∞–ø—Ä–æ—Å–æ–≤`);
        log(`[WB] ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalDuration}ms (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${avgRequestTime}ms)`);
        log(`[WB] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${Math.round(allFeedbacks.length / (totalDuration / 1000) * 60)} –æ—Ç–∑—ã–≤–æ–≤/–º–∏–Ω—É—Ç—É`);
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (store && store.settings && store.settings.startDate) {
            const startDate = new Date(store.settings.startDate);
            const filtered = allFeedbacks.filter(fb => new Date(fb.createdDate) >= startDate);
            log(`[WB] üóìÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ ${store.settings.startDate}: –æ—Å—Ç–∞–ª–æ—Å—å ${filtered.length} –∏–∑ ${allFeedbacks.length}`);
            return filtered;
        }
        
        return allFeedbacks;
        
    } catch (e) {
        log(`[WB] ‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${e.message}`);
        log(`[WB] üîç Stack trace: ${e.stack}`);
        log(`[WB] üìä –ß–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${allFeedbacks.length} –æ—Ç–∑—ã–≤–æ–≤ —Å–æ–±—Ä–∞–Ω–æ –¥–æ –æ—à–∏–±–∫–∏`);
        return allFeedbacks; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ —É—Å–ø–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å
    }
}

// ============================================================================
// Helper —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è dev mode
// ============================================================================

function isDevMode() {
    try {
        return PropertiesService.getUserProperties().getProperty('DEV_MODE') === 'true';
    } catch (e) {
        return false;
    }
}

function enableDevMode() {
    PropertiesService.getUserProperties().setProperty('DEV_MODE', 'true');
    log('‚úÖ DEV MODE –í–ö–õ–Æ–ß–ï–ù - –ë—É–¥—É—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤—Å–µ JSON –¥–∞–Ω–Ω—ã–µ!');
}

function disableDevMode() {
    PropertiesService.getUserProperties().setProperty('DEV_MODE', 'false');
    log('‚úÖ DEV MODE –í–´–ö–õ–Æ–ß–ï–ù');
}

// ============================================================================
// üî• –û–ö–¢–Ø–ë–†–¨ 2025: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ WB API v1
// –ü–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://dev.wildberries.ru/openapi/user-communication
// Endpoint: POST /api/v1/feedbacks/answer
// Body: { "id": "feedbackId", "text": "–æ—Ç–≤–µ—Ç" }
// ============================================================================

/**
 * @param {string} feedbackId - ID –æ—Ç–∑—ã–≤–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 * @param {string} text - –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ 2-5000 —Å–∏–º–≤–æ–ª–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 * @param {string} apiKey - WB API –∫–ª—é—á (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 * @returns {boolean} true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
 */
function sendWbFeedbackAnswer(feedbackId, text, apiKey) {
    const methodName = "WB /api/v1/feedbacks/answer";
    
    try {
        // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
        if (!feedbackId || typeof feedbackId !== 'string') {
            log(`[${methodName}] ‚ùå –û—à–∏–±–∫–∞: feedbackId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º`);
            return false;
        }
        
        if (!text || text.length < 2 || text.length > 5000) {
            log(`[${methodName}] ‚ùå –û—à–∏–±–∫–∞: text –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤ (—Ç–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: ${text?.length || 0})`);
            return false;
        }
        
        if (!apiKey || typeof apiKey !== 'string') {
            log(`[${methodName}] ‚ùå –û—à–∏–±–∫–∞: apiKey –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º`);
            return false;
        }
        
        // ‚úÖ –ü–û–°–¢–†–û–ï–ù–ò–ï –ó–ê–ü–†–û–°–ê
        const url = 'https://feedbacks-api.wildberries.ru/api/v1/feedbacks/answer';
        const payload = { 
            id: feedbackId,
            text: text
        };
        
        log(`[${methodName}] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤: ${feedbackId}`);
        log(`[${methodName}] üìù –¢–µ–∫—Å—Ç: "${text.substring(0, 100)}${text.length > 100 ? '...' : ''}"`);
        log(`[${methodName}] üîó URL: ${url}`);
        
        if (isDevMode()) {
            log(`[${methodName} DEBUG] Payload: ${JSON.stringify(payload)}`);
            log(`[${methodName} DEBUG] Headers: Authorization: ${apiKey.substring(0, 20)}..., Content-Type: application/json`);
        }
        
        // ‚úÖ –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê
        const requestStartTime = Date.now();
        const response = UrlFetchApp.fetch(url, {
            method: 'POST',
            headers: { 
                'Authorization': apiKey,
                'Content-Type': 'application/json'
            },
            payload: JSON.stringify(payload),
            muteHttpExceptions: true
        });
        const requestDuration = Date.now() - requestStartTime;
        
        // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê
        const code = response.getResponseCode();
        const responseBody = response.getContentText();
        
        log(`[${methodName}] üì• HTTP ${code} (${requestDuration}ms)`);
        
        if (responseBody && responseBody.length > 0) {
            log(`[${methodName}] üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${responseBody.substring(0, 200)}${responseBody.length > 200 ? '...' : ''}`);
        }
        
        // ‚úÖ –ê–ù–ê–õ–ò–ó –ö–û–î–û–í –û–¢–í–ï–¢–ê
        const success = (code === 200 || code === 201 || code === 204);
        
        if (success) {
            log(`[${methodName}] ‚úÖ –£–°–ü–ï–®–ù–û: –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
            
            if (code === 200) log(`[${methodName}] ‚ÑπÔ∏è 200 OK - –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ`);
            if (code === 201) log(`[${methodName}] ‚ÑπÔ∏è 201 Created - –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
            if (code === 204) log(`[${methodName}] ‚ÑπÔ∏è 204 No Content - –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ`);
            
            return true;
        }
        
        // ‚ùå –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
        log(`[${methodName}] ‚ùå –û–®–ò–ë–ö–ê: HTTP ${code}`);
        
        if (code === 400) {
            log(`[${methodName}] üîé 400 Bad Request - –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ`);
            log(`[${methodName}] üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:`);
            log(`[${methodName}]   ‚Ä¢ ID –æ—Ç–∑—ã–≤–∞: ${feedbackId}`);
            log(`[${methodName}]   ‚Ä¢ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            log(`[${methodName}]   ‚Ä¢ Content-Type header —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        } else if (code === 401) {
            log(`[${methodName}] üîé 401 Unauthorized - API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫`);
            log(`[${methodName}] üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: API Key (—Ç–µ–∫—É—â–∏–π: ${apiKey.substring(0, 20)}...)`);
        } else if (code === 403) {
            log(`[${methodName}] üîé 403 Forbidden - –ù–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –æ—Ç–∑—ã–≤ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω`);
            log(`[${methodName}] üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
            log(`[${methodName}]   ‚Ä¢ API –∫–ª—é—á –Ω–µ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã—Ö –ø—Ä–∞–≤`);
            log(`[${methodName}]   ‚Ä¢ –û—Ç–∑—ã–≤ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ hasAnswer)`);
            log(`[${methodName}]   ‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ WB`);
        } else if (code === 404) {
            log(`[${methodName}] üîé 404 Not Found - –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π endpoint`);
            log(`[${methodName}] üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:`);
            log(`[${methodName}]   ‚Ä¢ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–∑—ã–≤ —Å ID: ${feedbackId}`);
            log(`[${methodName}]   ‚Ä¢ URL endpoint: ${url}`);
        } else if (code === 422) {
            log(`[${methodName}] üîé 422 Unprocessable Entity - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
            log(`[${methodName}] üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:`);
            log(`[${methodName}]   ‚Ä¢ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ 2-5000)`);
            log(`[${methodName}]   ‚Ä¢ –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∞–º–∞/–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤`);
            log(`[${methodName}]   ‚Ä¢ –°—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å`);
        } else if (code === 429) {
            log(`[${methodName}] üîé 429 Too Many Requests - –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç`);
            log(`[${methodName}] üîç –õ–∏–º–∏—Ç WB: 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É (333ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏)`);
            log(`[${methodName}] ‚è≥ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π`);
        } else if (code >= 500) {
            log(`[${methodName}] üîé ${code} Server Error - –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ WB`);
            log(`[${methodName}] ‚è≥ –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`);
        }
        
        if (isDevMode()) {
            log(`[${methodName} DEBUG] –ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${responseBody}`);
        }
        
        return false;
        
    } catch (e) {
        const criticalError = `–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${e.message}`;
        log(`[${methodName}] ‚õî ${criticalError}`);
        log(`[${methodName}] üîç Stack trace: ${e.stack}`);
        return false;
    }
}

// ============================================================================
// ‚úÖ –ö–û–ù–ï–¶ WB.gs - –í–°–ï –§–£–ù–ö–¶–ò–ò –ì–û–¢–û–í–´
// ============================================================================
