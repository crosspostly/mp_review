/**
 * üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Å —É—á–µ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
 * –∏ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
 * 
 * –í–∫–ª—é—á–∞–µ—Ç:
 * - Unit —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
 * - Integration —Ç–µ—Å—Ç—ã
 * - Performance —Ç–µ—Å—Ç—ã
 * - API compliance —Ç–µ—Å—Ç—ã
 * - Error handling —Ç–µ—Å—Ç—ã
 * - Security —Ç–µ—Å—Ç—ã
 */

// ======================================================================
// ========================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í ======================
// ======================================================================

const COMPREHENSIVE_TEST_CONFIG = {
  ENABLE_LOGGING: true,
  MOCK_API_RESPONSES: true,
  TEST_TIMEOUT: 60000, // 60 —Å–µ–∫—É–Ω–¥
  MAX_TEST_ITERATIONS: 100,
  ENABLE_PERFORMANCE_TESTS: true,
  ENABLE_SECURITY_TESTS: true,
  ENABLE_API_COMPLIANCE_TESTS: true
};

// ======================================================================
// ========================== –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ú–û–ö-–î–ê–ù–ù–´–ï ===================
// ======================================================================

/**
 * –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WB API v2
 */
const MOCK_WB_V2_FEEDBACKS = {
  data: {
    feedbacks: [
      {
        id: "wb-v2-test-1",
        productValuation: 5,
        text: "–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä! –†–µ–∫–æ–º–µ–Ω–¥—É—é!",
        createdDate: "2024-01-15T10:00:00Z",
        isAnswered: false,
        productDetails: {
          nmId: 12345,
          productName: "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä WB v2",
          supplierArticle: "WB-12345"
        },
        photos: [
          {
            fullSize: "https://example.com/photo1.jpg",
            miniSize: "https://example.com/photo1_mini.jpg"
          }
        ],
        video: null
      },
      {
        id: "wb-v2-test-2",
        productValuation: 3,
        text: "–ù–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –º–æ–≥–ª–æ –±—ã—Ç—å –ª—É—á—à–µ",
        createdDate: "2024-01-14T15:30:00Z",
        isAnswered: true,
        productDetails: {
          nmId: 67890,
          productName: "–î—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä WB v2",
          supplierArticle: "WB-67890"
        },
        photos: [],
        video: null
      }
    ],
    count: 2,
    hasNext: false
  }
};

/**
 * –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Ozon API
 */
const MOCK_OZON_RESPONSE = {
  result: {
    reviews: [
      {
        id: "ozon-test-1",
        rating: 5,
        text: "–°—É–ø–µ—Ä –∫–∞—á–µ—Å—Ç–≤–æ! –û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω –ø–æ–∫—É–ø–∫–æ–π!",
        created_at: "2024-01-15T12:00:00Z",
        is_answered: false,
        product: {
          offer_id: "ozon-123",
          name: "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä Ozon",
          sku: "OZ-123"
        },
        photos: [
          {
            url: "https://example.com/ozon_photo1.jpg"
          }
        ],
        video: null
      },
      {
        id: "ozon-test-2",
        rating: 2,
        text: "–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –∫–∞—á–µ—Å—Ç–≤–æ –ø–ª–æ—Ö–æ–µ",
        created_at: "2024-01-14T18:45:00Z",
        is_answered: true,
        product: {
          offer_id: "ozon-456",
          name: "–î—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä Ozon",
          sku: "OZ-456"
        },
        photos: [],
        video: null
      }
    ],
    pagination: {
      has_next: false,
      last_id: "ozon-test-2"
    }
  }
};

/**
 * –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ API
 */
const MOCK_API_ERRORS = {
  WB: {
    401: { error: "Unauthorized", errorText: "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á" },
    403: { error: "Forbidden", errorText: "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" },
    429: { error: "Too Many Requests", errorText: "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤" },
    500: { error: "Internal Server Error", errorText: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }
  },
  OZON: {
    401: { error: "Unauthorized", errorText: "–ù–µ–≤–µ—Ä–Ω—ã–µ Client-Id –∏–ª–∏ Api-Key" },
    403: { error: "Forbidden", errorText: "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" },
    429: { error: "Too Many Requests", errorText: "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤" },
    500: { error: "Internal Server Error", errorText: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }
  }
};

// ======================================================================
// ========================== API COMPLIANCE –¢–ï–°–¢–´ =====================
// ======================================================================

/**
 * üß™ –¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è WB API v2
 */
function testWbApiV2Compliance() {
  logDebug('üß™ –¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è WB API v2', 'API-COMPLIANCE');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
    testWbApiV2Endpoint();
    
    // –¢–µ—Å—Ç 2: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
    testWbApiV2RequestStructure();
    
    // –¢–µ—Å—Ç 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    testWbApiV2ResponseStructure();
    
    // –¢–µ—Å—Ç 4: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
    testWbApiV2DateFiltering();
    
    // –¢–µ—Å—Ç 5: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    testWbApiV2RatingFiltering();
    
    logSuccess('‚úÖ WB API v2 compliance —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã', 'API-COMPLIANCE');
    return true;
    
  } catch (error) {
    logError(`‚ùå WB API v2 compliance —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã: ${error.message}`, 'API-COMPLIANCE');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ endpoint WB API v2
 */
function testWbApiV2Endpoint() {
  logDebug('–¢–µ—Å—Ç: WB API v2 endpoint', 'API-COMPLIANCE');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
  const expectedUrl = 'https://feedbacks-api.wildberries.ru/api/v2/feedbacks';
  
  // –ú–æ–∫–∞–µ–º UrlFetchApp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
  const originalUrlFetchApp = UrlFetchApp;
  let capturedUrl = '';
  
  global.UrlFetchApp = {
    fetch: function(url, options) {
      capturedUrl = url;
      return createMockWbV2Response();
    }
  };
  
  try {
    getWbFeedbacks('test-api-key', false, null);
    
    if (!capturedUrl.includes('/api/v2/feedbacks')) {
      throw new Error(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint: ${capturedUrl}`);
    }
    
    logSuccess('‚úÖ WB API v2 endpoint –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω', 'API-COMPLIANCE');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

/**
 * –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ WB API v2
 */
function testWbApiV2RequestStructure() {
  logDebug('–¢–µ—Å—Ç: WB API v2 —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞', 'API-COMPLIANCE');
  
  const store = {
    settings: {
      startDate: '2024-01-01',
      minRating: 4
    }
  };
  
  // –ú–æ–∫–∞–µ–º UrlFetchApp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const originalUrlFetchApp = UrlFetchApp;
  let capturedOptions = {};
  
  global.UrlFetchApp = {
    fetch: function(url, options) {
      capturedOptions = options;
      return createMockWbV2Response();
    }
  };
  
  try {
    getWbFeedbacks('test-api-key', false, store);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (!capturedOptions.headers || !capturedOptions.headers.Authorization) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥
    if (capturedOptions.method !== 'GET') {
      throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HTTP –º–µ—Ç–æ–¥');
    }
    
    logSuccess('‚úÖ WB API v2 —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'API-COMPLIANCE');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

/**
 * –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ WB API v2
 */
function testWbApiV2ResponseStructure() {
  logDebug('–¢–µ—Å—Ç: WB API v2 —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞', 'API-COMPLIANCE');
  
  const originalUrlFetchApp = UrlFetchApp;
  global.UrlFetchApp = {
    fetch: function(url, options) {
      return {
        getResponseCode: () => 200,
        getContentText: () => JSON.stringify(MOCK_WB_V2_FEEDBACKS)
      };
    }
  };
  
  try {
    const feedbacks = getWbFeedbacks('test-api-key', false, null);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    if (!Array.isArray(feedbacks)) {
      throw new Error('–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    }
    
    if (feedbacks.length === 0) {
      throw new Error('–û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–∑—ã–≤–∞
    const feedback = feedbacks[0];
    const requiredFields = ['id', 'productValuation', 'text', 'createdDate', 'isAnswered'];
    
    for (const field of requiredFields) {
      if (!(field in feedback)) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${field}`);
      }
    }
    
    logSuccess('‚úÖ WB API v2 —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'API-COMPLIANCE');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

/**
 * –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ WB API v2
 */
function testWbApiV2DateFiltering() {
  logDebug('–¢–µ—Å—Ç: WB API v2 —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ', 'API-COMPLIANCE');
  
  const store = {
    settings: {
      startDate: '2024-01-01'
    }
  };
  
  // –ú–æ–∫–∞–µ–º UrlFetchApp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞—Ç—ã
  const originalUrlFetchApp = UrlFetchApp;
  let capturedUrl = '';
  
  global.UrlFetchApp = {
    fetch: function(url, options) {
      capturedUrl = url;
      return createMockWbV2Response();
    }
  };
  
  try {
    getWbFeedbacks('test-api-key', false, store);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ URL
    if (!capturedUrl.includes('dateFrom=2024-01-01')) {
      logWarning('‚ö†Ô∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ URL)', 'API-COMPLIANCE');
    }
    
    logSuccess('‚úÖ WB API v2 —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞', 'API-COMPLIANCE');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

/**
 * –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É WB API v2
 */
function testWbApiV2RatingFiltering() {
  logDebug('–¢–µ—Å—Ç: WB API v2 —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É', 'API-COMPLIANCE');
  
  const store = {
    settings: {
      minRating: 4
    }
  };
  
  // –ú–æ–∫–∞–µ–º UrlFetchApp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞
  const originalUrlFetchApp = UrlFetchApp;
  let capturedUrl = '';
  
  global.UrlFetchApp = {
    fetch: function(url, options) {
      capturedUrl = url;
      return createMockWbV2Response();
    }
  };
  
  try {
    getWbFeedbacks('test-api-key', false, store);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ URL
    if (!capturedUrl.includes('valuation=4')) {
      logWarning('‚ö†Ô∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ URL)', 'API-COMPLIANCE');
    }
    
    logSuccess('‚úÖ WB API v2 —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞', 'API-COMPLIANCE');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

/**
 * üß™ –¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è Ozon API
 */
function testOzonApiCompliance() {
  logDebug('üß™ –¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è Ozon API', 'API-COMPLIANCE');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
    testOzonApiEndpoint();
    
    // –¢–µ—Å—Ç 2: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
    testOzonApiRequestStructure();
    
    // –¢–µ—Å—Ç 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    testOzonApiResponseStructure();
    
    // –¢–µ—Å—Ç 4: Cursor-based –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    testOzonApiPagination();
    
    logSuccess('‚úÖ Ozon API compliance —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã', 'API-COMPLIANCE');
    return true;
    
  } catch (error) {
    logError(`‚ùå Ozon API compliance —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã: ${error.message}`, 'API-COMPLIANCE');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ endpoint Ozon API
 */
function testOzonApiEndpoint() {
  logDebug('–¢–µ—Å—Ç: Ozon API endpoint', 'API-COMPLIANCE');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
  const expectedUrl = 'https://api.ozon.ru/composer-api.bx/page/json/v1';
  
  // –ú–æ–∫–∞–µ–º UrlFetchApp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
  const originalUrlFetchApp = UrlFetchApp;
  let capturedUrl = '';
  
  global.UrlFetchApp = {
    fetch: function(url, options) {
      capturedUrl = url;
      return createMockOzonResponse();
    }
  };
  
  try {
    getOzonFeedbacks('test-client-id', 'test-api-key', false, null);
    
    if (!capturedUrl.includes('api.ozon.ru')) {
      throw new Error(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint: ${capturedUrl}`);
    }
    
    logSuccess('‚úÖ Ozon API endpoint –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω', 'API-COMPLIANCE');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

/**
 * –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ Ozon API
 */
function testOzonApiRequestStructure() {
  logDebug('–¢–µ—Å—Ç: Ozon API —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞', 'API-COMPLIANCE');
  
  // –ú–æ–∫–∞–µ–º UrlFetchApp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const originalUrlFetchApp = UrlFetchApp;
  let capturedOptions = {};
  
  global.UrlFetchApp = {
    fetch: function(url, options) {
      capturedOptions = options;
      return createMockOzonResponse();
    }
  };
  
  try {
    getOzonFeedbacks('test-client-id', 'test-api-key', false, null);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥
    if (capturedOptions.method !== 'POST') {
      throw new Error('Ozon API –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å POST –º–µ—Ç–æ–¥');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (!capturedOptions.headers || !capturedOptions.headers['Client-Id']) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Client-Id');
    }
    
    if (!capturedOptions.headers || !capturedOptions.headers['Api-Key']) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Api-Key');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º body
    if (!capturedOptions.payload) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç payload –≤ –∑–∞–ø—Ä–æ—Å–µ');
    }
    
    const body = JSON.parse(capturedOptions.payload);
    if (!body.url || !body.postData) {
      throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ payload');
    }
    
    logSuccess('‚úÖ Ozon API —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'API-COMPLIANCE');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

/**
 * –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ Ozon API
 */
function testOzonApiResponseStructure() {
  logDebug('–¢–µ—Å—Ç: Ozon API —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞', 'API-COMPLIANCE');
  
  const originalUrlFetchApp = UrlFetchApp;
  global.UrlFetchApp = {
    fetch: function(url, options) {
      return {
        getResponseCode: () => 200,
        getContentText: () => JSON.stringify(MOCK_OZON_RESPONSE)
      };
    }
  };
  
  try {
    const feedbacks = getOzonFeedbacks('test-client-id', 'test-api-key', false, null);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    if (!Array.isArray(feedbacks)) {
      throw new Error('–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    }
    
    if (feedbacks.length === 0) {
      throw new Error('–û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–∑—ã–≤–∞
    const feedback = feedbacks[0];
    const requiredFields = ['id', 'rating', 'text', 'createdDate', 'isAnswered'];
    
    for (const field of requiredFields) {
      if (!(field in feedback)) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${field}`);
      }
    }
    
    logSuccess('‚úÖ Ozon API —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'API-COMPLIANCE');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

/**
 * –¢–µ—Å—Ç cursor-based –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ Ozon API
 */
function testOzonApiPagination() {
  logDebug('–¢–µ—Å—Ç: Ozon API cursor-based –ø–∞–≥–∏–Ω–∞—Ü–∏—è', 'API-COMPLIANCE');
  
  // –ú–æ–∫–∞–µ–º UrlFetchApp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const originalUrlFetchApp = UrlFetchApp;
  let capturedBodies = [];
  
  global.UrlFetchApp = {
    fetch: function(url, options) {
      const body = JSON.parse(options.payload);
      capturedBodies.push(body);
      return createMockOzonResponse();
    }
  };
  
  try {
    getOzonFeedbacks('test-client-id', 'test-api-key', false, null);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è cursor-based –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    if (capturedBodies.length === 0) {
      throw new Error('–ù–µ –±—ã–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API');
    }
    
    const firstRequest = capturedBodies[0];
    if (!firstRequest.postData.pagination || !firstRequest.postData.pagination.limit) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');
    }
    
    logSuccess('‚úÖ Ozon API cursor-based –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'API-COMPLIANCE');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

// ======================================================================
// ========================== ERROR HANDLING –¢–ï–°–¢–´ =====================
// ======================================================================

/**
 * üß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
 */
function testApiErrorHandling() {
  logDebug('üß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API', 'ERROR-HANDLING');
  
  try {
    // –¢–µ—Å—Ç 1: WB API –æ—à–∏–±–∫–∏
    testWbApiErrorHandling();
    
    // –¢–µ—Å—Ç 2: Ozon API –æ—à–∏–±–∫–∏
    testOzonApiErrorHandling();
    
    // –¢–µ—Å—Ç 3: –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
    testNetworkErrorHandling();
    
    // –¢–µ—Å—Ç 4: –¢–∞–π–º–∞—É—Ç—ã
    testTimeoutHandling();
    
    logSuccess('‚úÖ –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API –ø—Ä–æ–π–¥–µ–Ω—ã', 'ERROR-HANDLING');
    return true;
    
  } catch (error) {
    logError(`‚ùå –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API –ø—Ä–æ–≤–∞–ª–µ–Ω—ã: ${error.message}`, 'ERROR-HANDLING');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ WB API
 */
function testWbApiErrorHandling() {
  logDebug('–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WB API', 'ERROR-HANDLING');
  
  const errorCodes = [401, 403, 429, 500];
  
  for (const code of errorCodes) {
    const originalUrlFetchApp = UrlFetchApp;
    global.UrlFetchApp = {
      fetch: function(url, options) {
        return {
          getResponseCode: () => code,
          getContentText: () => JSON.stringify(MOCK_API_ERRORS.WB[code])
        };
      }
    };
    
    try {
      const feedbacks = getWbFeedbacks('invalid-key', false, null);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      if (!Array.isArray(feedbacks)) {
        throw new Error(`–ü—Ä–∏ –æ—à–∏–±–∫–µ ${code} –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –º–∞—Å—Å–∏–≤`);
      }
      
      logDebug(`‚úÖ –û—à–∏–±–∫–∞ ${code} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`, 'ERROR-HANDLING');
      
    } finally {
      global.UrlFetchApp = originalUrlFetchApp;
    }
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Ozon API
 */
function testOzonApiErrorHandling() {
  logDebug('–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Ozon API', 'ERROR-HANDLING');
  
  const errorCodes = [401, 403, 429, 500];
  
  for (const code of errorCodes) {
    const originalUrlFetchApp = UrlFetchApp;
    global.UrlFetchApp = {
      fetch: function(url, options) {
        return {
          getResponseCode: () => code,
          getContentText: () => JSON.stringify(MOCK_API_ERRORS.OZON[code])
        };
      }
    };
    
    try {
      const feedbacks = getOzonFeedbacks('invalid-client-id', 'invalid-api-key', false, null);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      if (!Array.isArray(feedbacks)) {
        throw new Error(`–ü—Ä–∏ –æ—à–∏–±–∫–µ ${code} –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –º–∞—Å—Å–∏–≤`);
      }
      
      logDebug(`‚úÖ –û—à–∏–±–∫–∞ ${code} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`, 'ERROR-HANDLING');
      
    } finally {
      global.UrlFetchApp = originalUrlFetchApp;
    }
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
 */
function testNetworkErrorHandling() {
  logDebug('–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫', 'ERROR-HANDLING');
  
  const originalUrlFetchApp = UrlFetchApp;
  global.UrlFetchApp = {
    fetch: function(url, options) {
      throw new Error('Network error: Connection timeout');
    }
  };
  
  try {
    const wbFeedbacks = getWbFeedbacks('test-key', false, null);
    const ozonFeedbacks = getOzonFeedbacks('test-client-id', 'test-key', false, null);
    
    // –ü—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
    if (!Array.isArray(wbFeedbacks) || !Array.isArray(ozonFeedbacks)) {
      throw new Error('–ü—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –º–∞—Å—Å–∏–≤—ã');
    }
    
    logSuccess('‚úÖ –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'ERROR-HANDLING');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
 */
function testTimeoutHandling() {
  logDebug('–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤', 'ERROR-HANDLING');
  
  // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ç–∞–π–º–∞—É—Ç
  function createTimeoutFunction() {
    return function() {
      Utilities.sleep(10000); // 10 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
      return {
        getResponseCode: () => 200,
        getContentText: () => '{"data":{"feedbacks":[]}}'
      };
    };
  }
  
  const originalUrlFetchApp = UrlFetchApp;
  global.UrlFetchApp = {
    fetch: createTimeoutFunction()
  };
  
  try {
    const startTime = Date.now();
    const feedbacks = getWbFeedbacks('test-key', false, null);
    const endTime = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∑–∞–≤–∏—Å–∞–µ—Ç –Ω–∞–¥–æ–ª–≥–æ
    if (endTime - startTime > 5000) {
      throw new Error('–§—É–Ω–∫—Ü–∏—è –∑–∞–≤–∏—Å–ª–∞ –Ω–∞ —Ç–∞–π–º–∞—É—Ç–µ');
    }
    
    logSuccess('‚úÖ –¢–∞–π–º–∞—É—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'ERROR-HANDLING');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

// ======================================================================
// ========================== SECURITY –¢–ï–°–¢–´ ===========================
// ======================================================================

/**
 * üß™ –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
function testSecurity() {
  logDebug('üß™ –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', 'SECURITY');
  
  try {
    // –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    testInputValidation();
    
    // –¢–µ—Å—Ç 2: –ó–∞—â–∏—Ç–∞ API –∫–ª—é—á–µ–π
    testApiKeyProtection();
    
    // –¢–µ—Å—Ç 3: Rate limiting
    testRateLimiting();
    
    // –¢–µ—Å—Ç 4: SQL injection –∑–∞—â–∏—Ç–∞
    testSqlInjectionProtection();
    
    logSuccess('‚úÖ –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã', 'SECURITY');
    return true;
    
  } catch (error) {
    logError(`‚ùå –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã: ${error.message}`, 'SECURITY');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function testInputValidation() {
  logDebug('–¢–µ—Å—Ç: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'SECURITY');
  
  // –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const invalidInputs = [
    { apiKey: null, expected: 'error' },
    { apiKey: '', expected: 'error' },
    { apiKey: '   ', expected: 'error' },
    { apiKey: '<script>alert("xss")</script>', expected: 'error' },
    { apiKey: 'test-key', clientId: null, expected: 'error' }
  ];
  
  for (const input of invalidInputs) {
    try {
      if (input.clientId !== undefined) {
        getOzonFeedbacks(input.clientId, input.apiKey, false, null);
      } else {
        getWbFeedbacks(input.apiKey, false, null);
      }
      
      if (input.expected === 'error') {
        throw new Error(`–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: ${JSON.stringify(input)}`);
      }
    } catch (error) {
      if (input.expected === 'error') {
        logDebug(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è: ${JSON.stringify(input)}`, 'SECURITY');
      } else {
        throw error;
      }
    }
  }
}

/**
 * –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã API –∫–ª—é—á–µ–π
 */
function testApiKeyProtection() {
  logDebug('–¢–µ—Å—Ç: –ó–∞—â–∏—Ç–∞ API –∫–ª—é—á–µ–π', 'SECURITY');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á–∏ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –ª–æ–≥–∏
  const originalLog = log;
  let loggedMessages = [];
  
  global.log = function(message, level, context) {
    loggedMessages.push(message);
    originalLog(message, level, context);
  };
  
  try {
    getWbFeedbacks('secret-api-key-123', false, null);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –ª–æ–≥–∏
    const hasSecretInLogs = loggedMessages.some(msg => 
      msg.includes('secret-api-key-123')
    );
    
    if (hasSecretInLogs) {
      throw new Error('API –∫–ª—é—á–∏ –ø–æ–ø–∞–ª–∏ –≤ –ª–æ–≥–∏!');
    }
    
    logSuccess('‚úÖ API –∫–ª—é—á–∏ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –ª–æ–≥–∏', 'SECURITY');
    
  } finally {
    global.log = originalLog;
  }
}

/**
 * –¢–µ—Å—Ç rate limiting
 */
function testRateLimiting() {
  logDebug('–¢–µ—Å—Ç: Rate limiting', 'SECURITY');
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  const startTime = Date.now();
  let requestCount = 0;
  
  const originalUrlFetchApp = UrlFetchApp;
  global.UrlFetchApp = {
    fetch: function(url, options) {
      requestCount++;
      return {
        getResponseCode: () => 200,
        getContentText: () => '{"data":{"feedbacks":[]}}'
      };
    }
  };
  
  try {
    // –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
    for (let i = 0; i < 5; i++) {
      getWbFeedbacks('test-key', false, null);
    }
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (duration < 1000) { // –ú–µ–Ω—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è 5 –∑–∞–ø—Ä–æ—Å–æ–≤
      logWarning('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç rate limiting', 'SECURITY');
    }
    
    logSuccess('‚úÖ Rate limiting –ø—Ä–æ–≤–µ—Ä–µ–Ω', 'SECURITY');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

/**
 * –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç SQL injection
 */
function testSqlInjectionProtection() {
  logDebug('–¢–µ—Å—Ç: –ó–∞—â–∏—Ç–∞ –æ—Ç SQL injection', 'SECURITY');
  
  const maliciousInputs = [
    "'; DROP TABLE users; --",
    "' OR '1'='1",
    "'; INSERT INTO users VALUES ('hacker', 'password'); --",
    "<script>alert('xss')</script>"
  ];
  
  for (const maliciousInput of maliciousInputs) {
    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å malicious input
      const store = {
        settings: {
          startDate: maliciousInput
        }
      };
      
      getWbFeedbacks('test-key', false, store);
      
      // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫, —ç—Ç–æ —Ö–æ—Ä–æ—à–æ
      logDebug(`‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç SQL injection —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è: ${maliciousInput}`, 'SECURITY');
      
    } catch (error) {
      // –û—à–∏–±–∫–∞ —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–µ–π
      logDebug(`‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç SQL injection —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è: ${maliciousInput}`, 'SECURITY');
    }
  }
}

// ======================================================================
// ========================== PERFORMANCE –¢–ï–°–¢–´ ========================
// ======================================================================

/**
 * üß™ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
function testPerformance() {
  logDebug('üß™ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', 'PERFORMANCE');
  
  try {
    // –¢–µ—Å—Ç 1: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    testExecutionTime();
    
    // –¢–µ—Å—Ç 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    testMemoryUsage();
    
    // –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    testLargeDataProcessing();
    
    // –¢–µ—Å—Ç 4: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    testParallelProcessing();
    
    logSuccess('‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã', 'PERFORMANCE');
    return true;
    
  } catch (error) {
    logError(`‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã: ${error.message}`, 'PERFORMANCE');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
 */
function testExecutionTime() {
  logDebug('–¢–µ—Å—Ç: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π', 'PERFORMANCE');
  
  const functions = [
    { name: 'getWbFeedbacks', fn: () => getWbFeedbacks('test-key', false, null) },
    { name: 'getOzonFeedbacks', fn: () => getOzonFeedbacks('test-client-id', 'test-key', false, null) },
    { name: 'processFeedbackBatch', fn: () => processFeedbackBatch([], [], MOCK_STORE, true) }
  ];
  
  for (const func of functions) {
    const startTime = Date.now();
    func.fn();
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    logDebug(`‚è±Ô∏è ${func.name}: ${duration}–º—Å`, 'PERFORMANCE');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è
    if (duration > 10000) { // –ë–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥
      logWarning(`‚ö†Ô∏è ${func.name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ: ${duration}–º—Å`, 'PERFORMANCE');
    }
  }
}

/**
 * –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
 */
function testMemoryUsage() {
  logDebug('–¢–µ—Å—Ç: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏', 'PERFORMANCE');
  
  // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
  const largeData = Array(1000).fill().map((_, i) => ({
    id: `test-${i}`,
    text: `Test feedback ${i}`,
    rating: Math.floor(Math.random() * 5) + 1,
    createdDate: new Date().toISOString()
  }));
  
  const startTime = Date.now();
  
  try {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö
    const processed = processFeedbackBatch(largeData, [], MOCK_STORE, true);
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    logDebug(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${largeData.length} –∑–∞–ø–∏—Å–µ–π –∑–∞ ${duration}–º—Å`, 'PERFORMANCE');
    logDebug(`‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: ${Math.round(largeData.length / (duration / 1000))} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫`, 'PERFORMANCE');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ
    if (!Array.isArray(processed)) {
      throw new Error('–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –º–∞—Å—Å–∏–≤');
    }
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'PERFORMANCE');
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
 */
function testLargeDataProcessing() {
  logDebug('–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö', 'PERFORMANCE');
  
  const sizes = [100, 500, 1000, 2000];
  
  for (const size of sizes) {
    const data = Array(size).fill().map((_, i) => ({
      id: `large-test-${i}`,
      text: `Large test feedback ${i}`,
      rating: Math.floor(Math.random() * 5) + 1,
      createdDate: new Date().toISOString()
    }));
    
    const startTime = Date.now();
    
    try {
      const processed = processFeedbackBatch(data, [], MOCK_STORE, true);
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      logDebug(`üìä –†–∞–∑–º–µ—Ä ${size}: ${duration}–º—Å (${Math.round(size / (duration / 1000))} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫)`, 'PERFORMANCE');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      const recordsPerSecond = size / (duration / 1000);
      if (recordsPerSecond < 10) { // –ú–µ–Ω—å—à–µ 10 –∑–∞–ø–∏—Å–µ–π –≤ —Å–µ–∫—É–Ω–¥—É
        logWarning(`‚ö†Ô∏è –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${size}: ${recordsPerSecond.toFixed(2)} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫`, 'PERFORMANCE');
      }
      
    } catch (error) {
      logError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑–º–µ—Ä–∞ ${size}: ${error.message}`, 'PERFORMANCE');
    }
  }
}

/**
 * –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
function testParallelProcessing() {
  logDebug('–¢–µ—Å—Ç: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞', 'PERFORMANCE');
  
  const stores = [
    { ...MOCK_STORE, id: 'parallel-test-1' },
    { ...MOCK_STORE, id: 'parallel-test-2' },
    { ...MOCK_STORE, id: 'parallel-test-3' }
  ];
  
  const startTime = Date.now();
  
  try {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤
    stores.forEach(store => {
      try {
        processSingleStore(store, true);
      } catch (error) {
        logDebug(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ ${store.id}: ${error.message}`, 'PERFORMANCE');
      }
    });
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    logDebug(`‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${stores.length} –º–∞–≥–∞–∑–∏–Ω–æ–≤: ${duration}–º—Å`, 'PERFORMANCE');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`, 'PERFORMANCE');
  }
}

// ======================================================================
// ========================== INTEGRATION –¢–ï–°–¢–´ ========================
// ======================================================================

/**
 * üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
 */
function testIntegration() {
  logDebug('üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã', 'INTEGRATION');
  
  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ WB
    testWbFullCycle();
    
    // –¢–µ—Å—Ç 2: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ Ozon
    testOzonFullCycle();
    
    // –¢–µ—Å—Ç 3: –°–º–µ—à–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    testMixedProcessing();
    
    // –¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    testProgressSystem();
    
    logSuccess('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã', 'INTEGRATION');
    return true;
    
  } catch (error) {
    logError(`‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã: ${error.message}`, 'INTEGRATION');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WB
 */
function testWbFullCycle() {
  logDebug('–¢–µ—Å—Ç: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ WB', 'INTEGRATION');
  
  const testStore = {
    ...MOCK_STORE,
    id: 'wb-integration-test',
    marketplace: 'wb',
    credentials: { apiKey: 'test-wb-key' }
  };
  
  try {
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–≥–∞–∑–∏–Ω
    const saveResult = saveStore(testStore);
    if (!saveResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω WB');
    }
    
    // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
    const processResult = processSingleStore(testStore, true);
    if (!processResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω WB');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progress = getStoreProgress(testStore.id);
    if (!progress) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∞–≥–∞–∑–∏–Ω–∞ WB');
    }
    
    // 4. –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω
    const deleteResult = deleteStore(testStore.id);
    if (!deleteResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω WB');
    }
    
    logSuccess('‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ WB —Ä–∞–±–æ—Ç–∞–µ—Ç', 'INTEGRATION');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ WB: ${error.message}`, 'INTEGRATION');
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Ozon
 */
function testOzonFullCycle() {
  logDebug('–¢–µ—Å—Ç: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ Ozon', 'INTEGRATION');
  
  const testStore = {
    ...MOCK_STORE,
    id: 'ozon-integration-test',
    marketplace: 'ozon',
    credentials: { 
      clientId: 'test-ozon-client-id',
      apiKey: 'test-ozon-key'
    }
  };
  
  try {
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–≥–∞–∑–∏–Ω
    const saveResult = saveStore(testStore);
    if (!saveResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω Ozon');
    }
    
    // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
    const processResult = processSingleStore(testStore, true);
    if (!processResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω Ozon');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progress = getStoreProgress(testStore.id);
    if (!progress) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∞–≥–∞–∑–∏–Ω–∞ Ozon');
    }
    
    // 4. –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω
    const deleteResult = deleteStore(testStore.id);
    if (!deleteResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω Ozon');
    }
    
    logSuccess('‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ Ozon —Ä–∞–±–æ—Ç–∞–µ—Ç', 'INTEGRATION');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ Ozon: ${error.message}`, 'INTEGRATION');
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç —Å–º–µ—à–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
function testMixedProcessing() {
  logDebug('–¢–µ—Å—Ç: –°–º–µ—à–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞', 'INTEGRATION');
  
  const wbStore = {
    ...MOCK_STORE,
    id: 'mixed-wb-test',
    marketplace: 'wb',
    credentials: { apiKey: 'test-wb-key' }
  };
  
  const ozonStore = {
    ...MOCK_STORE,
    id: 'mixed-ozon-test',
    marketplace: 'ozon',
    credentials: { 
      clientId: 'test-ozon-client-id',
      apiKey: 'test-ozon-key'
    }
  };
  
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    saveStore(wbStore);
    saveStore(ozonStore);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã
    const allStores = getStores();
    const activeStores = allStores.filter(store => store.isActive);
    
    for (const store of activeStores) {
      try {
        processSingleStore(store, true);
      } catch (error) {
        logDebug(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ ${store.id}: ${error.message}`, 'INTEGRATION');
      }
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
    deleteStore(wbStore.id);
    deleteStore(ozonStore.id);
    
    logSuccess('‚úÖ –°–º–µ—à–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'INTEGRATION');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–º–µ—à–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${error.message}`, 'INTEGRATION');
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
function testProgressSystem() {
  logDebug('–¢–µ—Å—Ç: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞', 'INTEGRATION');
  
  const testStoreId = 'progress-test-store';
  
  try {
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progressData = {
      lastPage: 5,
      lastDate: new Date().toISOString(),
      processedCount: 100
    };
    
    const saveResult = updateStoreProgress(testStoreId, progressData);
    if (!saveResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å');
    }
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const retrievedProgress = getStoreProgress(testStoreId);
    if (!retrievedProgress) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (retrievedProgress.lastPage !== 5) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
    }
    
    // 4. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const resetResult = resetStoreProgress(testStoreId);
    if (!resetResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å');
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å
    const clearedProgress = getStoreProgress(testStoreId);
    if (clearedProgress && Object.keys(clearedProgress).length > 0) {
      throw new Error('–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω');
    }
    
    logSuccess('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'INTEGRATION');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${error.message}`, 'INTEGRATION');
    throw error;
  }
}

// ======================================================================
// ========================== HELPER –§–£–ù–ö–¶–ò–ò ===========================
// ======================================================================

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–æ—Ç–≤–µ—Ç WB API v2
 */
function createMockWbV2Response() {
  return {
    getResponseCode: () => 200,
    getContentText: () => JSON.stringify(MOCK_WB_V2_FEEDBACKS)
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–æ—Ç–≤–µ—Ç Ozon API
 */
function createMockOzonResponse() {
  return {
    getResponseCode: () => 200,
    getContentText: () => JSON.stringify(MOCK_OZON_RESPONSE)
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
 */
function createMockErrorResponse(code, message) {
  return {
    getResponseCode: () => code,
    getContentText: () => JSON.stringify({ error: message })
  };
}

// ======================================================================
// ========================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==========================
// ======================================================================

/**
 * üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
 */
function runComprehensiveTests() {
  log('üß™ ===== –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====', 'INFO', 'COMPREHENSIVE-TEST');
  
  const results = {
    total: 0,
    passed: 0,
    failed: 0,
    errors: [],
    categories: {}
  };
  
  const testCategories = [
    { name: 'API Compliance', test: testWbApiV2Compliance, category: 'API-COMPLIANCE' },
    { name: 'Ozon API Compliance', test: testOzonApiCompliance, category: 'API-COMPLIANCE' },
    { name: 'Error Handling', test: testApiErrorHandling, category: 'ERROR-HANDLING' },
    { name: 'Security', test: testSecurity, category: 'SECURITY' },
    { name: 'Performance', test: testPerformance, category: 'PERFORMANCE' },
    { name: 'Integration', test: testIntegration, category: 'INTEGRATION' }
  ];
  
  for (const category of testCategories) {
    results.total++;
    log(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: ${category.name}`, 'INFO', 'COMPREHENSIVE-TEST');
    
    try {
      const success = category.test();
      if (success) {
        results.passed++;
        results.categories[category.category] = 'PASSED';
        logSuccess(`‚úÖ ${category.name} - –ü–†–û–ô–î–ï–ù`, 'COMPREHENSIVE-TEST');
      } else {
        results.failed++;
        results.categories[category.category] = 'FAILED';
        logError(`‚ùå ${category.name} - –ü–†–û–í–ê–õ–ï–ù`, 'COMPREHENSIVE-TEST');
      }
    } catch (error) {
      results.failed++;
      results.errors.push(`${category.name}: ${error.message}`);
      results.categories[category.category] = 'ERROR';
      logError(`‚ùå ${category.name} - –û–®–ò–ë–ö–ê: ${error.message}`, 'COMPREHENSIVE-TEST');
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('üß™ ===== –ò–¢–û–ì–ò –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====', 'INFO', 'COMPREHENSIVE-TEST');
  log(`üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.total}`, 'INFO', 'COMPREHENSIVE-TEST');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${results.passed}`, 'SUCCESS', 'COMPREHENSIVE-TEST');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.failed}`, 'ERROR', 'COMPREHENSIVE-TEST');
  
  // –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:', 'INFO', 'COMPREHENSIVE-TEST');
  for (const [category, status] of Object.entries(results.categories)) {
    const emoji = status === 'PASSED' ? '‚úÖ' : status === 'FAILED' ? '‚ùå' : '‚ö†Ô∏è';
    log(`  ${emoji} ${category}: ${status}`, 'INFO', 'COMPREHENSIVE-TEST');
  }
  
  if (results.errors.length > 0) {
    log('üîç –û—à–∏–±–∫–∏:', 'WARNING', 'COMPREHENSIVE-TEST');
    results.errors.forEach(error => {
      log(`  - ${error}`, 'ERROR', 'COMPREHENSIVE-TEST');
    });
  }
  
  const successRate = Math.round((results.passed / results.total) * 100);
  log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`, 'INFO', 'COMPREHENSIVE-TEST');
  
  if (successRate === 100) {
    logSuccess('üéâ –í–°–ï –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!', 'COMPREHENSIVE-TEST');
  } else if (successRate >= 80) {
    logWarning(`‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ (${successRate}%), —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${results.failed} —Ç–µ—Å—Ç–æ–≤`, 'COMPREHENSIVE-TEST');
  } else {
    logError(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ (${successRate}%), —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞`, 'COMPREHENSIVE-TEST');
  }
  
  return results;
}

/**
 * üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */
function runQuickComprehensiveTests() {
  log('üß™ ===== –ë–´–°–¢–†–´–ï –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –¢–ï–°–¢–´ =====', 'INFO', 'QUICK-COMPREHENSIVE');
  
  const criticalTests = [
    { name: 'WB API v2 Compliance', test: testWbApiV2Compliance },
    { name: 'Ozon API Compliance', test: testOzonApiCompliance },
    { name: 'Error Handling', test: testApiErrorHandling },
    { name: 'Security', test: testSecurity }
  ];
  
  let passed = 0;
  let total = criticalTests.length;
  
  for (const test of criticalTests) {
    try {
      if (test.test()) {
        passed++;
        logSuccess(`‚úÖ ${test.name}`, 'QUICK-COMPREHENSIVE');
      } else {
        logError(`‚ùå ${test.name}`, 'QUICK-COMPREHENSIVE');
      }
    } catch (error) {
      logError(`‚ùå ${test.name}: ${error.message}`, 'QUICK-COMPREHENSIVE');
    }
  }
  
  log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`, 'INFO', 'QUICK-COMPREHENSIVE');
  return passed === total;
}