name: üìä Monitoring & Health Check

on:
  schedule:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  repository-health:
    name: üîç –ó–¥–æ—Ä–æ–≤—å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4
      
    - name: üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        echo "üìä –†–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:"
        du -sh . | awk '{print "  üìÅ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: " $1}'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        file_count=$(find . -type f | wc -l)
        echo "  üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: $file_count"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
        code_lines=$(find . -name "*.gs" -o -name "*.js" -o -name "*.html" | xargs wc -l | tail -1 | awk '{print $1}')
        echo "  üìù –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: $code_lines"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π
        function_count=$(grep -r "function " *.gs 2>/dev/null | wc -l)
        echo "  üîß –§—É–Ω–∫—Ü–∏–π: $function_count"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤
        test_count=$(grep -r "function test" *.gs 2>/dev/null | wc -l)
        echo "  üß™ –¢–µ—Å—Ç–æ–≤: $test_count"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        doc_count=$(find . -name "*.md" | wc -l)
        echo "  üìö –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: $doc_count"

  # üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  activity-analysis:
    name: üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4
      
    - name: üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      run: |
        echo "üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏..."
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤:"
        git log --oneline --since="1 week ago" | wc -l | awk '{print "  üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: " $1 " –∫–æ–º–º–∏—Ç–æ–≤"}'
        git log --oneline --since="1 month ago" | wc -l | awk '{print "  üìÖ –ó–∞ –º–µ—Å—è—Ü: " $1 " –∫–æ–º–º–∏—Ç–æ–≤"}'
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:"
        git log --since="1 week ago" --pretty=format: --name-only | sort | uniq -c | sort -rn | head -10 | while read count file; do
          echo "  üìÑ $file: $count –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        done
        
        # –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ—Ä–æ–≤
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤:"
        git log --since="1 month ago" --pretty=format:"%an" | sort | uniq -c | sort -rn | while read count author; do
          echo "  üë§ $author: $count –∫–æ–º–º–∏—Ç–æ–≤"
        done

  # üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤
  test-health:
    name: üß™ –ó–¥–æ—Ä–æ–≤—å–µ —Ç–µ—Å—Ç–æ–≤
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4
      
    - name: üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ç–µ—Å—Ç–æ–≤
      run: |
        echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ç–µ—Å—Ç–æ–≤..."
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:"
        
        # Unit —Ç–µ—Å—Ç—ã
        unit_tests=$(grep -r "function test" tests.gs 2>/dev/null | wc -l)
        echo "  üß™ Unit —Ç–µ—Å—Ç—ã: $unit_tests"
        
        # WB API —Ç–µ—Å—Ç—ã
        wb_tests=$(grep -r "function test" wb_v2_only_tests.gs 2>/dev/null | wc -l)
        echo "  üõí WB API —Ç–µ—Å—Ç—ã: $wb_tests"
        
        # Comprehensive —Ç–µ—Å—Ç—ã
        comp_tests=$(grep -r "function test" comprehensive_tests.gs 2>/dev/null | wc -l)
        echo "  üî¨ Comprehensive —Ç–µ—Å—Ç—ã: $comp_tests"
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤
        total_tests=$((unit_tests + wb_tests + comp_tests))
        echo "  üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total_tests"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
        echo "üìä –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏:"
        if [ $total_tests -gt 50 ]; then
          echo "  ‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ ($total_tests —Ç–µ—Å—Ç–æ–≤)"
        elif [ $total_tests -gt 20 ]; then
          echo "  ‚ö†Ô∏è –•–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ ($total_tests —Ç–µ—Å—Ç–æ–≤)"
        else
          echo "  ‚ùå –ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ ($total_tests —Ç–µ—Å—Ç–æ–≤)"
        fi

  # üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  documentation-health:
    name: üìö –ó–¥–æ—Ä–æ–≤—å–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4
      
    - name: üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      run: |
        echo "üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:"
        
        docs=(
          "README_GITHUB.md:README"
          "DEPLOYMENT_GUIDE.md:–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é"
          "API_DOCUMENTATION_ANALYSIS.md:–ê–Ω–∞–ª–∏–∑ API"
          "GITHUB_COMMIT_INSTRUCTIONS.md:–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–æ–º–º–∏—Ç–∞–º"
        )
        
        for doc_info in "${docs[@]}"; do
          file=$(echo $doc_info | cut -d: -f1)
          name=$(echo $doc_info | cut -d: -f2)
          
          if [ -f "$file" ]; then
            size=$(wc -c < "$file")
            lines=$(wc -l < "$file")
            echo "  ‚úÖ $name: $size –±–∞–π—Ç, $lines —Å—Ç—Ä–æ–∫"
          else
            echo "  ‚ùå $name: –û–¢–°–£–¢–°–¢–í–£–ï–¢"
          fi
        done
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ README
        if [ -f "README_GITHUB.md" ]; then
          echo "üìñ –ö–∞—á–µ—Å—Ç–≤–æ README:"
          
          if grep -q "## –û–ø–∏—Å–∞–Ω–∏–µ" "README_GITHUB.md"; then
            echo "  ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ"
          else
            echo "  ‚ùå –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ"
          fi
          
          if grep -q "## –£—Å—Ç–∞–Ω–æ–≤–∫–∞" "README_GITHUB.md"; then
            echo "  ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"
          else
            echo "  ‚ùå –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"
          fi
          
          if grep -q "## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ" "README_GITHUB.md"; then
            echo "  ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
          else
            echo "  ‚ùå –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
          fi
        fi

  # üéØ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  monitoring-report:
    name: üéØ –û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    runs-on: ubuntu-latest
    needs: [repository-health, activity-analysis, test-health, documentation-health]
    if: always()
    
    steps:
    - name: üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      run: |
        echo "üéØ ===== –û–¢–ß–ï–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ====="
        echo "üìÖ –î–∞—Ç–∞: $(date)"
        echo "üïê –í—Ä–µ–º—è: $(date +%H:%M:%S)"
        echo ""
        
        echo "üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–æ–∫:"
        echo "  üîç –ó–¥–æ—Ä–æ–≤—å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ${{ needs.repository-health.result }}"
        echo "  üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${{ needs.activity-analysis.result }}"
        echo "  üß™ –ó–¥–æ—Ä–æ–≤—å–µ —Ç–µ—Å—Ç–æ–≤: ${{ needs.test-health.result }}"
        echo "  üìö –ó–¥–æ—Ä–æ–≤—å–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${{ needs.documentation-health.result }}"
        echo ""
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        success_count=0
        total_count=4
        
        if [ "${{ needs.repository-health.result }}" = "success" ]; then
          ((success_count++))
        fi
        
        if [ "${{ needs.activity-analysis.result }}" = "success" ]; then
          ((success_count++))
        fi
        
        if [ "${{ needs.test-health.result }}" = "success" ]; then
          ((success_count++))
        fi
        
        if [ "${{ needs.documentation-health.result }}" = "success" ]; then
          ((success_count++))
        fi
        
        success_rate=$((success_count * 100 / total_count))
        
        echo "üìà –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: $success_rate%"
        echo ""
        
        if [ $success_rate -eq 100 ]; then
          echo "üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!"
          echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
          exit 0
        elif [ $success_rate -ge 75 ]; then
          echo "‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ"
          echo "üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ $((total_count - success_count)) –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º"
          exit 0
        else
          echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
          echo "üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
          exit 1
        fi
        
        echo ""
        echo "üéØ ===== –ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê ====="