name: üß™ Continuous Integration & Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00 UTC
    - cron: '0 2 * * *'

jobs:
  # üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
  code-analysis:
    name: üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4
      
    - name: üîç –ê–Ω–∞–ª–∏–∑ Google Apps Script —Ñ–∞–π–ª–æ–≤
      run: |
        echo "üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        echo "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:"
        ls -la *.gs
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JavaScript
        echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript:"
        for file in *.gs; do
          if [ -f "$file" ]; then
            echo "  ‚úÖ $file - –Ω–∞–π–¥–µ–Ω"
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            if grep -q "function " "$file"; then
              echo "    ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏"
            else
              echo "    ‚ö†Ô∏è –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–π"
            fi
          fi
        done
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        echo "üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:"
        if [ -f "README_GITHUB.md" ]; then
          echo "  ‚úÖ README –Ω–∞–π–¥–µ–Ω"
        else
          echo "  ‚ùå README –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        fi
        
        if [ -f "DEPLOYMENT_GUIDE.md" ]; then
          echo "  ‚úÖ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞–π–¥–µ–Ω–æ"
        else
          echo "  ‚ùå –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        fi

  # üß™ Unit —Ç–µ—Å—Ç—ã
  unit-tests:
    name: üß™ Unit —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4
      
    - name: üß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤
      run: |
        echo "üß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤..."
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        
        # –°–∏–º—É–ª—è—Ü–∏—è Google Apps Script –æ–∫—Ä—É–∂–µ–Ω–∏—è
        cat > test_environment.js << 'EOF'
        // –°–∏–º—É–ª—è—Ü–∏—è Google Apps Script API
        global.UrlFetchApp = {
          fetch: function(url, options) {
            return {
              getResponseCode: function() { return 200; },
              getContentText: function() { 
                return JSON.stringify({
                  data: {
                    feedbacks: [
                      {
                        id: 'test-1',
                        productValuation: 5,
                        text: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤',
                        createdDate: new Date().toISOString(),
                        isAnswered: false
                      }
                    ]
                  }
                });
              }
            };
          }
        };
        
        global.Utilities = {
          sleep: function(ms) { /* —Å–∏–º—É–ª—è—Ü–∏—è */ }
        };
        
        global.SpreadsheetApp = {
          getActiveSpreadsheet: function() {
            return {
              getSheetByName: function(name) {
                return {
                  getRange: function() { return { getValue: () => '', setValue: () => {} }; },
                  appendRow: function() {},
                  getLastRow: function() { return 1; }
                };
              }
            };
          }
        };
        
        global.PropertiesService = {
          getScriptProperties: function() {
            return {
              getProperty: function(key) { return null; },
              setProperty: function(key, value) { return null; }
            };
          }
        };
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        global.log = function(msg, level, category) { 
          console.log(`[${level || 'INFO'}-${category || 'SYSTEM'}] ${msg}`); 
        };
        global.logDebug = function(msg, category) { 
          console.log(`[DEBUG-${category || 'SYSTEM'}] ${msg}`); 
        };
        global.logSuccess = function(msg, category) { 
          console.log(`[SUCCESS-${category || 'SYSTEM'}] ${msg}`); 
        };
        global.logError = function(msg, category) { 
          console.log(`[ERROR-${category || 'SYSTEM'}] ${msg}`); 
        };
        global.logWarning = function(msg, category) { 
          console.log(`[WARNING-${category || 'SYSTEM'}] ${msg}`); 
        };
        
        // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ
        global.MOCK_STORE = {
          id: 'test-store',
          name: 'Test Store',
          credentials: {
            apiKey: 'test-api-key'
          },
          settings: {
            startDate: '2024-01-01',
            minRating: 4
          }
        };
        
        global.MOCK_WB_FEEDBACKS = [
          {
            id: 'wb-test-1',
            productValuation: 5,
            text: '–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä!',
            createdDate: '2024-01-15T10:00:00Z',
            isAnswered: false
          }
        ];
        
        global.MOCK_OZON_FEEDBACKS = [
          {
            id: 'ozon-test-1',
            rating: 5,
            text: '–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä!',
            created_at: '2024-01-15T10:00:00Z',
            is_answered: false
          }
        ];
        EOF
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        echo "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        echo "üìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
        node -e "
        require('./test_environment.js');
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ getWbFeedbacks
        function getWbFeedbacks(apiKey, includeAnswered, store) {
          console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º getWbFeedbacks...');
          return MOCK_WB_FEEDBACKS;
        }
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ getOzonFeedbacks
        function getOzonFeedbacks(apiKey, includeAnswered, store) {
          console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º getOzonFeedbacks...');
          return MOCK_OZON_FEEDBACKS;
        }
        
        // –¢–µ—Å—Ç—ã
        try {
          const wbFeedbacks = getWbFeedbacks('test-key', false, MOCK_STORE);
          if (!Array.isArray(wbFeedbacks)) {
            throw new Error('getWbFeedbacks –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤');
          }
          console.log('‚úÖ getWbFeedbacks —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
          
          const ozonFeedbacks = getOzonFeedbacks('test-key', false, MOCK_STORE);
          if (!Array.isArray(ozonFeedbacks)) {
            throw new Error('getOzonFeedbacks –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤');
          }
          console.log('‚úÖ getOzonFeedbacks —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
          
          console.log('üéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.message);
          process.exit(1);
        }
        "
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ WB API v2
        echo "üìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ WB API v2"
        node -e "
        require('./test_environment.js');
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ buildWbApiV2Url
        function buildWbApiV2Url(includeAnswered, skip, take, store) {
          const baseUrl = 'https://feedbacks-api.wildberries.ru/api/v2/feedbacks';
          const params = new URLSearchParams();
          params.append('isAnswered', includeAnswered);
          params.append('take', take);
          params.append('skip', skip);
          params.append('order', 'dateDesc');
          
          if (store?.settings?.startDate) {
            params.append('dateFrom', store.settings.startDate);
          }
          
          if (store?.settings?.minRating) {
            params.append('valuation', store.settings.minRating);
          }
          
          return \`\${baseUrl}?\${params.toString()}\`;
        }
        
        try {
          const url = buildWbApiV2Url(false, 0, 100, MOCK_STORE);
          if (!url.includes('/api/v2/feedbacks')) {
            throw new Error('URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å v2 endpoint');
          }
          if (!url.includes('dateFrom=2024-01-01')) {
            throw new Error('URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ');
          }
          if (!url.includes('valuation=4')) {
            throw new Error('URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É');
          }
          console.log('‚úÖ buildWbApiV2Url —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
          console.log('üéâ WB API v2 —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ WB API v2 —Ç–µ—Å—Ç–∞—Ö:', error.message);
          process.exit(1);
        }
        "
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        echo "üìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"
        node -e "
        require('./test_environment.js');
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        function testErrorHandling() {
          try {
            // –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏
            throw new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞');
          } catch (error) {
            console.log('‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', error.message);
            return true;
          }
        }
        
        try {
          const result = testErrorHandling();
          if (!result) {
            throw new Error('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
          }
          console.log('üéâ –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–π–¥–µ–Ω—ã!');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:', error.message);
          process.exit(1);
        }
        "
        
        echo "üéâ –í—Å–µ unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"

  # üîí Security —Ç–µ—Å—Ç—ã
  security-tests:
    name: üîí Security —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4
      
    - name: üîí –ó–∞–ø—É—Å–∫ security —Ç–µ—Å—Ç–æ–≤
      run: |
        echo "üîí –ó–∞–ø—É—Å–∫ security —Ç–µ—Å—Ç–æ–≤..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–¥–µ
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ö–∞—Ä–¥–∫–æ–¥ API –∫–ª—é—á–µ–π
        echo "üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ö–∞—Ä–¥–∫–æ–¥ API –∫–ª—é—á–µ–π:"
        if grep -r "api.*key.*=" *.gs; then
          echo "  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–¥–∫–æ–¥ API –∫–ª—é—á–∏"
        else
          echo "  ‚úÖ –•–∞—Ä–¥–∫–æ–¥ API –∫–ª—é—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
        echo "üíâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏:"
        if grep -r "SELECT\|INSERT\|UPDATE\|DELETE" *.gs; then
          echo "  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã SQL –∑–∞–ø—Ä–æ—Å—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)"
        else
          echo "  ‚úÖ SQL –∑–∞–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ XSS
        echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ XSS:"
        if grep -r "innerHTML\|outerHTML" *.gs; then
          echo "  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏"
        else
          echo "  ‚úÖ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        echo "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
        if grep -r "password\|secret\|token" *.gs; then
          echo "  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        else
          echo "  ‚úÖ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
        
        echo "üéâ Security —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"

  # üìä Performance —Ç–µ—Å—Ç—ã
  performance-tests:
    name: üìä Performance —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4
      
    - name: üìä –ó–∞–ø—É—Å–∫ performance —Ç–µ—Å—Ç–æ–≤
      run: |
        echo "üìä –ó–∞–ø—É—Å–∫ performance —Ç–µ—Å—Ç–æ–≤..."
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        echo "‚è±Ô∏è –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
        
        node -e "
        const startTime = Date.now();
        
        // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        const largeDataset = Array(1000).fill().map((_, i) => ({
          id: \`item-\${i}\`,
          text: \`Test item \${i}\`,
          rating: Math.floor(Math.random() * 5) + 1
        }));
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const filtered = largeDataset.filter(item => item.rating >= 4);
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        console.log(\`‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 1000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤: \${duration}–º—Å\`);
        
        if (duration > 1000) {
          console.log('‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
        } else {
          console.log('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ');
        }
        
        console.log(\`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: \${largeDataset.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\`);
        console.log(\`üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: \${filtered.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\`);
        "
        
        # –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏
        echo "üß† –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏..."
        
        node -e "
        const used = process.memoryUsage();
        console.log('üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:');
        console.log(\`  RSS: \${Math.round(used.rss / 1024 / 1024)} MB\`);
        console.log(\`  Heap Used: \${Math.round(used.heapUsed / 1024 / 1024)} MB\`);
        console.log(\`  Heap Total: \${Math.round(used.heapTotal / 1024 / 1024)} MB\`);
        "
        
        echo "üéâ Performance —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"

  # üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
  documentation:
    name: üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout –∫–æ–¥–∞
      uses: actions/checkout@v4
      
    - name: üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      run: |
        echo "üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:"
        
        files=(
          "README_GITHUB.md"
          "DEPLOYMENT_GUIDE.md"
          "API_DOCUMENTATION_ANALYSIS.md"
          "GITHUB_COMMIT_INSTRUCTIONS.md"
        )
        
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "  ‚úÖ $file - –Ω–∞–π–¥–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            size=$(wc -c < "$file")
            if [ $size -gt 1000 ]; then
              echo "    ‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $size –±–∞–π—Ç (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)"
            else
              echo "    ‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $size –±–∞–π—Ç (–º–∞–ª–æ)"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if grep -q "^#" "$file"; then
              echo "    ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏"
            else
              echo "    ‚ö†Ô∏è –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏"
            fi
          else
            echo "  ‚ùå $file - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
          fi
        done
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ README
        echo "üìñ –ü—Ä–æ–≤–µ—Ä–∫–∞ README:"
        if [ -f "README_GITHUB.md" ]; then
          if grep -q "## –û–ø–∏—Å–∞–Ω–∏–µ" "README_GITHUB.md"; then
            echo "  ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª '–û–ø–∏—Å–∞–Ω–∏–µ'"
          else
            echo "  ‚ö†Ô∏è –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª '–û–ø–∏—Å–∞–Ω–∏–µ'"
          fi
          
          if grep -q "## –£—Å—Ç–∞–Ω–æ–≤–∫–∞" "README_GITHUB.md"; then
            echo "  ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª '–£—Å—Ç–∞–Ω–æ–≤–∫–∞'"
          else
            echo "  ‚ö†Ô∏è –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª '–£—Å—Ç–∞–Ω–æ–≤–∫–∞'"
          fi
        fi
        
        echo "üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

  # üéØ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  test-summary:
    name: üéØ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    runs-on: ubuntu-latest
    needs: [code-analysis, unit-tests, security-tests, performance-tests, documentation]
    if: always()
    
    steps:
    - name: üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      run: |
        echo "üéØ ===== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ====="
        echo ""
        echo "üìä –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤:"
        echo "  üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: ${{ needs.code-analysis.result }}"
        echo "  üß™ Unit —Ç–µ—Å—Ç—ã: ${{ needs.unit-tests.result }}"
        echo "  üîí Security —Ç–µ—Å—Ç—ã: ${{ needs.security-tests.result }}"
        echo "  üìä Performance —Ç–µ—Å—Ç—ã: ${{ needs.performance-tests.result }}"
        echo "  üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${{ needs.documentation.result }}"
        echo ""
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        success_count=0
        total_count=5
        exit_code=0
        
        if [ "${{ needs.code-analysis.result }}" = "success" ]; then
          success_count=$((success_count + 1))
        fi
        
        if [ "${{ needs.unit-tests.result }}" = "success" ]; then
          success_count=$((success_count + 1))
        fi
        
        if [ "${{ needs.security-tests.result }}" = "success" ]; then
          success_count=$((success_count + 1))
        fi
        
        if [ "${{ needs.performance-tests.result }}" = "success" ]; then
          success_count=$((success_count + 1))
        fi
        
        if [ "${{ needs.documentation.result }}" = "success" ]; then
          success_count=$((success_count + 1))
        fi
        
        success_rate=$((success_count * 100 / total_count))
        
        echo "üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $success_rate%"
        echo ""
        
        if [ $success_rate -eq 100 ]; then
          echo "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!"
          echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é"
          exit_code=0
        elif [ $success_rate -ge 80 ]; then
          echo "‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ($success_rate%)"
          echo "üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ $((total_count - success_count)) —Ç–µ—Å—Ç–æ–≤"
          exit_code=1
        else
          echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ ($success_rate%)"
          echo "üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞"
          exit_code=1
        fi
        
        echo ""
        echo "üéØ ===== –ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê ====="
        echo ""
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π exit code
        if [ $exit_code -eq 0 ]; then
          echo "‚úÖ CI –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        else
          echo "‚ùå CI –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏"
        fi
        
        exit $exit_code
