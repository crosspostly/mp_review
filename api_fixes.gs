/**
 * üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø API
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 * WB API v1, Ozon API –∏ Google Apps Script best practices.
 */

// ============ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï API –§–£–ù–ö–¶–ò–ò ============
// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏–∑ code.gs (logDebug, logError, logSuccess, logWarning, isDevMode)
// –í–ê–ñ–ù–û: –ü—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç WB API v1 —Å–æ–≥–ª–∞—Å–Ω–æ final-working-schema.md

// ======================================================================
// ========================== OZON API –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø =====================
// ======================================================================

/**
 * üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ Ozon API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É POST –∑–∞–ø—Ä–æ—Å–∞ –∏ cursor-based –ø–∞–≥–∏–Ω–∞—Ü–∏—é
 */
function getOzonFeedbacksFixed(clientId, apiKey, includeAnswered = false, store = null) {
  log(`üöÄ –ó–ê–ü–£–°–ö Ozon API (includeAnswered=${includeAnswered})`, 'OZON-API-FIXED');
  log(`Client ID: ${clientId ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`, 'OZON-API-FIXED');
  
  const MAX_EXECUTION_TIME = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  const startTime = Date.now();
  let allFeedbacks = [];
  let hasNext = true;
  let lastId = "";
  let pageNumber = 0;
  
  try {
    while (hasNext && (Date.now() - startTime) < MAX_EXECUTION_TIME) {
      pageNumber++;
      
      log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} (lastId: ${lastId || '–ø—É—Å—Ç–æ–π'})`, 'OZON-API-FIXED');
      
      const pageFeedbacks = getOzonFeedbacksPageFixed(clientId, apiKey, includeAnswered, lastId, store);
      
      if (pageFeedbacks === null) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNumber}`, 'OZON-API-FIXED');
        break;
      }
      
      if (pageFeedbacks.length === 0) {
        log('‚úÖ –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é', 'OZON-API-FIXED');
        break;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã
      const processedFeedbacks = processFeedbacksPageForOzon(pageFeedbacks);
      allFeedbacks = allFeedbacks.concat(processedFeedbacks);
      
      log(`üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber}: –ø–æ–ª—É—á–µ–Ω–æ ${pageFeedbacks.length}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedFeedbacks.length}`, 'OZON-API-FIXED');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º lastId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (pageFeedbacks.length > 0) {
        lastId = pageFeedbacks[pageFeedbacks.length - 1].id;
      }
      
      hasNext = (pageFeedbacks.length === 100); // Ozon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 100 –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å
      
      // Rate limiting: –º–∞–∫—Å–∏–º—É–º 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
      Utilities.sleep(250); // 250–º—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }
    
    const duration = Math.round((Date.now() - startTime) / 1000);
    log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${allFeedbacks.length} –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ ${duration}—Å (${pageNumber} —Å—Ç—Ä–∞–Ω–∏—Ü)`);
    
    return allFeedbacks;
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ Ozon: ${error.message}`, 'OZON-API-FIXED');
    throw error;
  }
}

/**
 * üöÄ –†–ê–ë–û–ß–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤ Ozon
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–´–ô endpoint: https://api-seller.ozon.ru/v1/review/list
 */
function getOzonFeedbacksPageFixed(clientId, apiKey, includeAnswered, lastId, store) {
  const url = 'https://api-seller.ozon.ru/v1/review/list';
  
  // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è /v1/review/list
  const payload = {
    filter: {
      has_text: true  // –¢–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤—ã —Å —Ç–µ–∫—Å—Ç–æ–º
    },
    sort: {
      type: 'CREATED_AT',
      order: 'DESC'
    },
    limit: 100,
    last_id: lastId || ''
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ—Ç–≤–µ—Ç–æ–≤
  if (includeAnswered) {
    payload.filter.status = ['PENDING', 'PROCESSED', 'MODERATED', 'NEW'];
  } else {
    payload.filter.has_answer = false;
    payload.filter.status = ['PENDING', 'MODERATED', 'NEW'];
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
  if (store && store.settings && store.settings.startDate) {
    const startDate = store.settings.startDate;
    const today = new Date().toISOString().split('T')[0];
    payload.filter.date_from = startDate + 'T00:00:00.000Z';
    payload.filter.date_to = today + 'T23:59:59.999Z';
    log(`üóìÔ∏è –§–∏–ª—å—Ç—Ä –¥–∞—Ç: ${startDate} - ${today}`);
  }
  
  const options = {
    method: 'POST',
    headers: {
      'Client-Id': clientId,
      'Api-Key': apiKey,
      'Content-Type': 'application/json'
    },
    payload: JSON.stringify(payload),
    followRedirects: true,
    muteHttpExceptions: true
  };
  
  try {
    log(`üì§ POST ${url} | last_id: ${lastId || '–ø—É—Å—Ç–æ–π'}`);
    
    const response = UrlFetchApp.fetch(url, options);
    const responseCode = response.getResponseCode();
    const responseBody = response.getContentText();
    
    log(`üì• HTTP ${responseCode} | —Ä–∞–∑–º–µ—Ä: ${responseBody.length} –±–∞–π—Ç`);
    
    if (responseCode !== 200) {
      log(`‚ùå HTTP ${responseCode}: ${responseBody.substring(0, 500)}`);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
      if (responseCode === 401) log('üîé 401 Unauthorized - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Client-Id –∏ Api-Key');
      if (responseCode === 403) log('üîé 403 Forbidden - API –∫–ª—é—á –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤');
      if (responseCode === 429) log('üîé 429 Too Many Requests - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç 50 RPS');
      if (responseCode >= 500) log(`üîé ${responseCode} Server Error - –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Ozon`);
      
      return null;
    }
    
    const json = JSON.parse(responseBody);
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–∞–Ω–Ω—ã–µ –≤ –ö–û–†–ù–ï JSON, –Ω–µ –≤ result!
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { "reviews": [...], "has_next": true, "last_id": "..." }
    if (!json.reviews || !Array.isArray(json.reviews)) {
      log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(json).substring(0, 200)}`);
      log(`‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å "reviews" –º–∞—Å—Å–∏–≤–æ–º –≤ –∫–æ—Ä–Ω–µ JSON`);
      return null;
    }
    
    const reviews = json.reviews || [];
    log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º lastId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ö–û–†–ù–Ø JSON
    if (json.last_id) {
      // last_id –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    }
    
    return reviews;
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`);
    return null;
  }
}

/**
 * üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ Ozon
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É POST –∑–∞–ø—Ä–æ—Å–∞
 */
function sendOzonFeedbackAnswerFixed(feedbackId, text, clientId, apiKey) {
  log(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ Ozon –¥–ª—è –æ—Ç–∑—ã–≤–∞ ${feedbackId}`);
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!feedbackId || !text || !clientId || !apiKey) {
    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
  }
  
  if (text.length > 2000) {
    throw new Error('–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 2000 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  if (text.length < 1) {
    throw new Error('–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
  }
  
  const url = 'https://api.ozon.ru/composer-api.bx/page/json/v1';
  
  // üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
  const body = {
    url: '/seller-reviews/answer',
    postData: {
      review_id: feedbackId,
      text: text
    }
  };
  
  const options = {
    method: 'POST',
    headers: {
      'Client-Id': clientId,
      'Api-Key': apiKey,
      'Content-Type': 'application/json'
    },
    payload: JSON.stringify(body),
    muteHttpExceptions: true
  };
  
  // Retry –ª–æ–≥–∏–∫–∞ —Å exponential backoff
  const maxRetries = 3;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}`);
      
      const response = UrlFetchApp.fetch(url, options);
      const responseCode = response.getResponseCode();
      const responseBody = response.getContentText();
      
      log(`HTTP ${responseCode}: ${responseBody}`);
      
      if (responseCode === 200) {
        log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        return { success: true, response: responseBody };
      }
      
      if (responseCode === 429) {
        // Rate limit - –∂–¥–µ–º –¥–æ–ª—å—à–µ
        const waitTime = Math.pow(2, attempt) * 1000;
        log(`‚è≥ Rate limit, –∂–¥–µ–º ${waitTime}–º—Å`);
        Utilities.sleep(waitTime);
        continue;
      }
      
      if (responseCode >= 400 && responseCode < 500) {
        // Client error - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        throw new Error(`Client error ${responseCode}: ${responseBody}`);
      }
      
      if (responseCode >= 500) {
        // Server error - –ø–æ–≤—Ç–æ—Ä—è–µ–º
        if (attempt === maxRetries) {
          throw new Error(`Server error ${responseCode}: ${responseBody}`);
        }
        const waitTime = Math.pow(2, attempt) * 1000;
        log(`‚è≥ Server error, –∂–¥–µ–º ${waitTime}–º—Å`);
        Utilities.sleep(waitTime);
        continue;
      }
      
    } catch (error) {
      if (attempt === maxRetries) {
        log(`‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã: ${error.message}`);
        throw error;
      }
      
      const waitTime = Math.pow(2, attempt) * 1000;
      log(`‚è≥ –û—à–∏–±–∫–∞, –∂–¥–µ–º ${waitTime}–º—Å: ${error.message}`);
      Utilities.sleep(waitTime);
    }
  }
}

// ======================================================================
// ========================== GAS OPTIMIZATIONS ========================
// ======================================================================

/**
 * üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–∏–Ω —Ç—Ä–∏–≥–≥–µ—Ä –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ GAS
 */
function processAllActiveStoresOptimized() {
  log('üöÄ –ó–ê–ü–£–°–ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤');
  
  const startTime = Date.now();
  const stores = getStores().filter(store => store && store.isActive);
  
  log(`üìä –ù–∞–π–¥–µ–Ω–æ ${stores.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤`);
  
  const results = {
    total: stores.length,
    processed: 0,
    errors: 0,
    wb: 0,
    ozon: 0
  };
  
  for (const store of stores) {
    if (!store) {
      log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω`);
      continue;
    }
    
    try {
      log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞: ${store.name} (${store.id})`);
      
      const storeStartTime = Date.now();
      const success = processSingleStore(store, true);
      const storeDuration = Date.now() - storeStartTime;
      
      if (success) {
        results.processed++;
        results[store.marketplace]++;
        log(`‚úÖ ${store.name}: ${storeDuration}–º—Å`);
      } else {
        results.errors++;
        log(`‚ùå ${store.name}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const totalDuration = Date.now() - startTime;
      if (totalDuration > 4 * 60 * 1000) { // 4 –º–∏–Ω—É—Ç—ã
        log(`‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è`);
        break;
      }
      
    } catch (error) {
      results.errors++;
      log(`‚ùå ${store.name}: ${error.message}`);
    }
  }
  
  const totalDuration = Math.round((Date.now() - startTime) / 1000);
  log(`üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${results.processed}/${results.total} –∑–∞ ${totalDuration}—Å`);
  log(`üìä WB: ${results.wb}, Ozon: ${results.ozon}, –û—à–∏–±–∫–∏: ${results.errors}`);
  
  return results;
}

/**
 * üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
 * –°–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
 */
function setupSmartTriggers() {
  log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤');
  
  try {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    const existingTriggers = ScriptApp.getProjectTriggers();
    for (const trigger of existingTriggers) {
      if (trigger.getHandlerFunction() === 'processAllActiveStoresOptimized') {
        ScriptApp.deleteTrigger(trigger);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
    const trigger = ScriptApp.newTrigger('processAllActiveStoresOptimized')
      .timeBased()
      .everyMinutes(30) // –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
      .create();
    
    log(`‚úÖ –°–æ–∑–¥–∞–Ω —É–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: ${trigger.getUniqueId()}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∏–≥–≥–µ—Ä–µ
    PropertiesService.getScriptProperties().setProperty('smart_trigger_id', trigger.getUniqueId());
    
    return true;
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–º–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: ${error.message}`);
    return false;
  }
}

/**
 * üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PropertiesService –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function getCachedData(key, ttlMinutes = 60) {
  const cacheKey = `cache_${key}`;
  const timestampKey = `cache_${key}_timestamp`;
  
  try {
    const properties = PropertiesService.getScriptProperties();
    const cachedData = properties.getProperty(cacheKey);
    const timestamp = properties.getProperty(timestampKey);
    
    if (!cachedData || !timestamp) {
      return null;
    }
    
    const age = Date.now() - parseInt(timestamp);
    const ttl = ttlMinutes * 60 * 1000;
    
    if (age > ttl) {
      // –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª
      properties.deleteProperty(cacheKey);
      properties.deleteProperty(timestampKey);
      return null;
    }
    
    return JSON.parse(cachedData);
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞ ${key}: ${error.message}`);
    return null;
  }
}

/**
 * üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
 */
function setCachedData(key, data, ttlMinutes = 60) {
  const cacheKey = `cache_${key}`;
  const timestampKey = `cache_${key}_timestamp`;
  
  try {
    const properties = PropertiesService.getScriptProperties();
    properties.setProperty(cacheKey, JSON.stringify(data));
    properties.setProperty(timestampKey, Date.now().toString());
    
    log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: ${key} (TTL: ${ttlMinutes}–º)`);
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à ${key}: ${error.message}`);
  }
}

// ======================================================================
// ========================== MIGRATION –§–£–ù–ö–¶–ò–ò ========================
// ======================================================================

/**
 * üöÄ –§–£–ù–ö–¶–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Ozon API
 */
function migrateToOzonApiFixed() {
  log('üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Ozon API');
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getOzonFeedbacks
    const oldFunction = getOzonFeedbacks.toString();
    const newFunction = getOzonFeedbacksFixed.toString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –∫–∞–∫ backup
    PropertiesService.getScriptProperties().setProperty('ozon_api_old_backup', oldFunction);
    
    log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Ozon API –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return true;
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Ozon API: ${error.message}`);
    return false;
  }
}

/**
 * üöÄ –§–£–ù–ö–¶–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò: –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
 */
function performFullMigration() {
  log('üöÄ ===== –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ =====', 'INFO', 'MIGRATION');
  
  const results = {
    ozonApiFixed: false,
    smartTriggers: false,
    caching: false
  };
  
  try {
    // 1. –ú–∏–≥—Ä–∞—Ü–∏—è Ozon API
    log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è Ozon API...', 'INFO', 'MIGRATION');
    results.ozonApiFixed = migrateToOzonApiFixed();
    
    // 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–º–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–º–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤...', 'INFO', 'MIGRATION');
    results.smartTriggers = setupSmartTriggers();
    
    // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...', 'INFO', 'MIGRATION');
    setCachedData('test', { test: true }, 1);
    const cached = getCachedData('test');
    results.caching = cached && cached.test === true;
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    const successCount = Object.values(results).filter(Boolean).length;
    const totalCount = Object.keys(results).length;
    
    log(`üìä –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount}/${totalCount} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ`, 'INFO', 'MIGRATION');
    
    if (successCount === totalCount) {
      log('üéâ –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!');
    } else {
      log(`‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏`);
    }
    
    return results;
    
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${error.message}`);
    return results;
  }
}
