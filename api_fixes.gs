/**
 * üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø API
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 * WB API v2, Ozon API –∏ Google Apps Script best practices.
 */

// ======================================================================
// ========================== WB API V2 –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ====================
// ======================================================================

/**
 * üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ WB API v2
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint v2 –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
 */
function getWbFeedbacksV2(apiKey, includeAnswered = false, store = null) {
  logDebug(`üöÄ –ó–ê–ü–£–°–ö WB API v2 (includeAnswered=${includeAnswered})`, 'WB-API-V2');
  logDebug(`Store: ${store?.name || 'null'}`, 'WB-API-V2');
  
  const MAX_TAKE = 5000; // –ú–∞–∫—Å–∏–º—É–º –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB API v2
  const MAX_SKIP = 199990; // –ú–∞–∫—Å–∏–º—É–º –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB API v2
  let allFeedbacks = [];
  let skip = 0;
  let hasMoreData = true;
  let pageCount = 0;
  
  try {
    while (hasMoreData && skip <= MAX_SKIP) {
      pageCount++;
      
      // üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º v2 endpoint —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const url = buildWbApiV2Url(includeAnswered, skip, MAX_TAKE, store);
      
      logDebug(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageCount}: ${url}`, 'WB-API-V2');
      
      const response = UrlFetchApp.fetch(url, {
        method: 'GET',
        headers: {
          'Authorization': apiKey,
          'Content-Type': 'application/json'
        },
        muteHttpExceptions: true
      });
      
      const responseCode = response.getResponseCode();
      logDebug(`HTTP Response Code: ${responseCode}`, 'WB-API-V2');
      
      if (responseCode !== 200) {
        const responseBody = response.getContentText();
        logError(`HTTP ${responseCode}: ${responseBody.substring(0, 200)}`, 'WB-API-V2');
        break;
      }
      
      const json = JSON.parse(response.getContentText());
      
      // üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ v2
      if (json.error) {
        logError(`API Error: ${json.errorText}`, 'WB-API-V2');
        break;
      }
      
      const feedbacks = json.data?.feedbacks || [];
      logDebug(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${feedbacks.length} –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageCount}`, 'WB-API-V2');
      
      if (feedbacks.length === 0) {
        logDebug('‚úÖ –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é', 'WB-API-V2');
        break;
      }
      
      allFeedbacks = allFeedbacks.concat(feedbacks);
      
      if (feedbacks.length < MAX_TAKE) {
        logDebug('‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é', 'WB-API-V2');
        break;
      }
      
      skip += MAX_TAKE;
      hasMoreData = skip <= MAX_SKIP;
      
      // Rate limiting: –º–∞–∫—Å–∏–º—É–º 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É
      Utilities.sleep(350); // 350–º—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }
    
    logSuccess(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${allFeedbacks.length} –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ ${pageCount} —Å—Ç—Ä–∞–Ω–∏—Ü`, 'WB-API-V2');
    return allFeedbacks;
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ WB v2: ${error.message}`, 'WB-API-V2');
    throw error;
  }
}

/**
 * üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –¥–ª—è WB API v2
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–µ –∏ —Ä–µ–π—Ç–∏–Ω–≥—É
 */
function buildWbApiV2Url(includeAnswered, skip, take, store) {
  const baseUrl = 'https://feedbacks-api.wildberries.ru/api/v2/feedbacks';
  const params = new URLSearchParams();
  
  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  params.append('isAnswered', includeAnswered);
  params.append('take', take);
  params.append('skip', skip);
  params.append('order', 'dateDesc');
  
  // üöÄ –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–µ
  if (store?.settings?.startDate) {
    params.append('dateFrom', store.settings.startDate);
    logDebug(`üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ: ${store.settings.startDate}`, 'WB-API-V2');
  }
  
  // üöÄ –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
  if (store?.settings?.minRating) {
    params.append('valuation', store.settings.minRating);
    logDebug(`‚≠ê –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É: ${store.settings.minRating}`, 'WB-API-V2');
  }
  
  // üöÄ –ù–û–í–û–ï: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–≤–∞—Ä—É (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
  if (store?.settings?.nmId) {
    params.append('nmId', store.settings.nmId);
    logDebug(`üõçÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–≤–∞—Ä—É: ${store.settings.nmId}`, 'WB-API-V2');
  }
  
  return `${baseUrl}?${params.toString()}`;
}

/**
 * üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ WB
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint v2 –∏ retry –ª–æ–≥–∏–∫—É
 */
function sendWbFeedbackAnswerV2(feedbackId, text, apiKey) {
  logDebug(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ WB v2 –¥–ª—è –æ—Ç–∑—ã–≤–∞ ${feedbackId}`, 'WB-API-V2');
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!feedbackId || !text || !apiKey) {
    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
  }
  
  if (text.length > 1000) {
    throw new Error('–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  if (text.length < 1) {
    throw new Error('–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
  }
  
  const url = `https://feedbacks-api.wildberries.ru/api/v2/feedbacks/${feedbackId}/answer`;
  const payload = {
    text: text
  };
  
  const options = {
    method: 'POST',
    headers: {
      'Authorization': apiKey,
      'Content-Type': 'application/json'
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };
  
  // Retry –ª–æ–≥–∏–∫–∞ —Å exponential backoff
  const maxRetries = 3;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      logDebug(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}`, 'WB-API-V2');
      
      const response = UrlFetchApp.fetch(url, options);
      const responseCode = response.getResponseCode();
      const responseBody = response.getContentText();
      
      logDebug(`HTTP ${responseCode}: ${responseBody}`, 'WB-API-V2');
      
      if (responseCode === 200) {
        logSuccess(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`, 'WB-API-V2');
        return { success: true, response: responseBody };
      }
      
      if (responseCode === 429) {
        // Rate limit - –∂–¥–µ–º –¥–æ–ª—å—à–µ
        const waitTime = Math.pow(2, attempt) * 1000;
        logWarning(`‚è≥ Rate limit, –∂–¥–µ–º ${waitTime}–º—Å`, 'WB-API-V2');
        Utilities.sleep(waitTime);
        continue;
      }
      
      if (responseCode >= 400 && responseCode < 500) {
        // Client error - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        throw new Error(`Client error ${responseCode}: ${responseBody}`);
      }
      
      if (responseCode >= 500) {
        // Server error - –ø–æ–≤—Ç–æ—Ä—è–µ–º
        if (attempt === maxRetries) {
          throw new Error(`Server error ${responseCode}: ${responseBody}`);
        }
        const waitTime = Math.pow(2, attempt) * 1000;
        logWarning(`‚è≥ Server error, –∂–¥–µ–º ${waitTime}–º—Å`, 'WB-API-V2');
        Utilities.sleep(waitTime);
        continue;
      }
      
    } catch (error) {
      if (attempt === maxRetries) {
        logError(`‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã: ${error.message}`, 'WB-API-V2');
        throw error;
      }
      
      const waitTime = Math.pow(2, attempt) * 1000;
      logWarning(`‚è≥ –û—à–∏–±–∫–∞, –∂–¥–µ–º ${waitTime}–º—Å: ${error.message}`, 'WB-API-V2');
      Utilities.sleep(waitTime);
    }
  }
}

// ======================================================================
// ========================== OZON API –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø =====================
// ======================================================================

/**
 * üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ Ozon API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É POST –∑–∞–ø—Ä–æ—Å–∞ –∏ cursor-based –ø–∞–≥–∏–Ω–∞—Ü–∏—é
 */
function getOzonFeedbacksFixed(clientId, apiKey, includeAnswered = false, store = null) {
  logDebug(`üöÄ –ó–ê–ü–£–°–ö Ozon API (includeAnswered=${includeAnswered})`, 'OZON-API-FIXED');
  logDebug(`Client ID: ${clientId ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`, 'OZON-API-FIXED');
  
  const MAX_EXECUTION_TIME = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  const startTime = Date.now();
  let allFeedbacks = [];
  let hasNext = true;
  let lastId = "";
  let pageNumber = 0;
  
  try {
    while (hasNext && (Date.now() - startTime) < MAX_EXECUTION_TIME) {
      pageNumber++;
      
      logDebug(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} (lastId: ${lastId || '–ø—É—Å—Ç–æ–π'})`, 'OZON-API-FIXED');
      
      const pageFeedbacks = getOzonFeedbacksPageFixed(clientId, apiKey, includeAnswered, lastId, store);
      
      if (pageFeedbacks === null) {
        logError(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNumber}`, 'OZON-API-FIXED');
        break;
      }
      
      if (pageFeedbacks.length === 0) {
        logDebug('‚úÖ –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é', 'OZON-API-FIXED');
        break;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã
      const processedFeedbacks = processFeedbacksPageForOzon(pageFeedbacks);
      allFeedbacks = allFeedbacks.concat(processedFeedbacks);
      
      logDebug(`üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber}: –ø–æ–ª—É—á–µ–Ω–æ ${pageFeedbacks.length}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedFeedbacks.length}`, 'OZON-API-FIXED');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º lastId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (pageFeedbacks.length > 0) {
        lastId = pageFeedbacks[pageFeedbacks.length - 1].id;
      }
      
      hasNext = (pageFeedbacks.length === 100); // Ozon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 100 –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å
      
      // Rate limiting: –º–∞–∫—Å–∏–º—É–º 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
      Utilities.sleep(250); // 250–º—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }
    
    const duration = Math.round((Date.now() - startTime) / 1000);
    logSuccess(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${allFeedbacks.length} –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ ${duration}—Å (${pageNumber} —Å—Ç—Ä–∞–Ω–∏—Ü)`, 'OZON-API-FIXED');
    
    return allFeedbacks;
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ Ozon: ${error.message}`, 'OZON-API-FIXED');
    throw error;
  }
}

/**
 * üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤ Ozon
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É POST –∑–∞–ø—Ä–æ—Å–∞
 */
function getOzonFeedbacksPageFixed(clientId, apiKey, includeAnswered, lastId, store) {
  const url = 'https://api.ozon.ru/composer-api.bx/page/json/v1';
  
  // üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ Ozon API
  const body = {
    url: '/seller-reviews',
    postData: {
      filter: {
        product_id: [],
        status: 'ALL',
        visibility: 'ALL'
      },
      sort: {
        field: 'created_at',
        direction: 'DESC'
      },
      pagination: {
        limit: 100,
        last_id: lastId || ''
      }
    }
  };
  
  const options = {
    method: 'POST',
    headers: {
      'Client-Id': clientId,
      'Api-Key': apiKey,
      'Content-Type': 'application/json'
    },
    payload: JSON.stringify(body),
    muteHttpExceptions: true
  };
  
  try {
    logDebug(`üì§ POST –∑–∞–ø—Ä–æ—Å: ${JSON.stringify(body)}`, 'OZON-API-FIXED');
    
    const response = UrlFetchApp.fetch(url, options);
    const responseCode = response.getResponseCode();
    const responseBody = response.getContentText();
    
    logDebug(`HTTP ${responseCode}`, 'OZON-API-FIXED');
    
    if (responseCode !== 200) {
      logError(`HTTP ${responseCode}: ${responseBody}`, 'OZON-API-FIXED');
      return null;
    }
    
    const json = JSON.parse(responseBody);
    
    // üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    if (json.error) {
      logError(`API Error: ${json.error}`, 'OZON-API-FIXED');
      return null;
    }
    
    const reviews = json.result?.reviews || [];
    logDebug(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤`, 'OZON-API-FIXED');
    
    return reviews;
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`, 'OZON-API-FIXED');
    return null;
  }
}

/**
 * üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ Ozon
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É POST –∑–∞–ø—Ä–æ—Å–∞
 */
function sendOzonFeedbackAnswerFixed(feedbackId, text, clientId, apiKey) {
  logDebug(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ Ozon –¥–ª—è –æ—Ç–∑—ã–≤–∞ ${feedbackId}`, 'OZON-API-FIXED');
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!feedbackId || !text || !clientId || !apiKey) {
    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
  }
  
  if (text.length > 2000) {
    throw new Error('–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 2000 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  if (text.length < 1) {
    throw new Error('–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
  }
  
  const url = 'https://api.ozon.ru/composer-api.bx/page/json/v1';
  
  // üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
  const body = {
    url: '/seller-reviews/answer',
    postData: {
      review_id: feedbackId,
      text: text
    }
  };
  
  const options = {
    method: 'POST',
    headers: {
      'Client-Id': clientId,
      'Api-Key': apiKey,
      'Content-Type': 'application/json'
    },
    payload: JSON.stringify(body),
    muteHttpExceptions: true
  };
  
  // Retry –ª–æ–≥–∏–∫–∞ —Å exponential backoff
  const maxRetries = 3;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      logDebug(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}`, 'OZON-API-FIXED');
      
      const response = UrlFetchApp.fetch(url, options);
      const responseCode = response.getResponseCode();
      const responseBody = response.getContentText();
      
      logDebug(`HTTP ${responseCode}: ${responseBody}`, 'OZON-API-FIXED');
      
      if (responseCode === 200) {
        logSuccess(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`, 'OZON-API-FIXED');
        return { success: true, response: responseBody };
      }
      
      if (responseCode === 429) {
        // Rate limit - –∂–¥–µ–º –¥–æ–ª—å—à–µ
        const waitTime = Math.pow(2, attempt) * 1000;
        logWarning(`‚è≥ Rate limit, –∂–¥–µ–º ${waitTime}–º—Å`, 'OZON-API-FIXED');
        Utilities.sleep(waitTime);
        continue;
      }
      
      if (responseCode >= 400 && responseCode < 500) {
        // Client error - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        throw new Error(`Client error ${responseCode}: ${responseBody}`);
      }
      
      if (responseCode >= 500) {
        // Server error - –ø–æ–≤—Ç–æ—Ä—è–µ–º
        if (attempt === maxRetries) {
          throw new Error(`Server error ${responseCode}: ${responseBody}`);
        }
        const waitTime = Math.pow(2, attempt) * 1000;
        logWarning(`‚è≥ Server error, –∂–¥–µ–º ${waitTime}–º—Å`, 'OZON-API-FIXED');
        Utilities.sleep(waitTime);
        continue;
      }
      
    } catch (error) {
      if (attempt === maxRetries) {
        logError(`‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã: ${error.message}`, 'OZON-API-FIXED');
        throw error;
      }
      
      const waitTime = Math.pow(2, attempt) * 1000;
      logWarning(`‚è≥ –û—à–∏–±–∫–∞, –∂–¥–µ–º ${waitTime}–º—Å: ${error.message}`, 'OZON-API-FIXED');
      Utilities.sleep(waitTime);
    }
  }
}

// ======================================================================
// ========================== GAS OPTIMIZATIONS ========================
// ======================================================================

/**
 * üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–∏–Ω —Ç—Ä–∏–≥–≥–µ—Ä –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ GAS
 */
function processAllActiveStoresOptimized() {
  logDebug('üöÄ –ó–ê–ü–£–°–ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤', 'GAS-OPTIMIZED');
  
  const startTime = Date.now();
  const stores = getStores().filter(store => store && store.isActive);
  
  logDebug(`üìä –ù–∞–π–¥–µ–Ω–æ ${stores.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤`, 'GAS-OPTIMIZED');
  
  const results = {
    total: stores.length,
    processed: 0,
    errors: 0,
    wb: 0,
    ozon: 0
  };
  
  for (const store of stores) {
    if (!store) {
      logDebug(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω`, 'GAS-OPTIMIZED');
      continue;
    }
    
    try {
      logDebug(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞: ${store.name} (${store.id})`, 'GAS-OPTIMIZED');
      
      const storeStartTime = Date.now();
      const success = processSingleStore(store, true);
      const storeDuration = Date.now() - storeStartTime;
      
      if (success) {
        results.processed++;
        results[store.marketplace]++;
        logSuccess(`‚úÖ ${store.name}: ${storeDuration}–º—Å`, 'GAS-OPTIMIZED');
      } else {
        results.errors++;
        logError(`‚ùå ${store.name}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏`, 'GAS-OPTIMIZED');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const totalDuration = Date.now() - startTime;
      if (totalDuration > 4 * 60 * 1000) { // 4 –º–∏–Ω—É—Ç—ã
        logWarning(`‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è`, 'GAS-OPTIMIZED');
        break;
      }
      
    } catch (error) {
      results.errors++;
      logError(`‚ùå ${store.name}: ${error.message}`, 'GAS-OPTIMIZED');
    }
  }
  
  const totalDuration = Math.round((Date.now() - startTime) / 1000);
  logSuccess(`üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${results.processed}/${results.total} –∑–∞ ${totalDuration}—Å`, 'GAS-OPTIMIZED');
  logDebug(`üìä WB: ${results.wb}, Ozon: ${results.ozon}, –û—à–∏–±–∫–∏: ${results.errors}`, 'GAS-OPTIMIZED');
  
  return results;
}

/**
 * üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
 * –°–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
 */
function setupSmartTriggers() {
  logDebug('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤', 'SMART-TRIGGERS');
  
  try {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    const existingTriggers = ScriptApp.getProjectTriggers();
    for (const trigger of existingTriggers) {
      if (trigger.getHandlerFunction() === 'processAllActiveStoresOptimized') {
        ScriptApp.deleteTrigger(trigger);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
    const trigger = ScriptApp.newTrigger('processAllActiveStoresOptimized')
      .timeBased()
      .everyMinutes(30) // –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
      .create();
    
    logSuccess(`‚úÖ –°–æ–∑–¥–∞–Ω —É–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: ${trigger.getUniqueId()}`, 'SMART-TRIGGERS');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∏–≥–≥–µ—Ä–µ
    PropertiesService.getScriptProperties().setProperty('smart_trigger_id', trigger.getUniqueId());
    
    return true;
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–º–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: ${error.message}`, 'SMART-TRIGGERS');
    return false;
  }
}

/**
 * üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PropertiesService –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function getCachedData(key, ttlMinutes = 60) {
  const cacheKey = `cache_${key}`;
  const timestampKey = `cache_${key}_timestamp`;
  
  try {
    const properties = PropertiesService.getScriptProperties();
    const cachedData = properties.getProperty(cacheKey);
    const timestamp = properties.getProperty(timestampKey);
    
    if (!cachedData || !timestamp) {
      return null;
    }
    
    const age = Date.now() - parseInt(timestamp);
    const ttl = ttlMinutes * 60 * 1000;
    
    if (age > ttl) {
      // –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª
      properties.deleteProperty(cacheKey);
      properties.deleteProperty(timestampKey);
      return null;
    }
    
    return JSON.parse(cachedData);
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞ ${key}: ${error.message}`, 'CACHE');
    return null;
  }
}

/**
 * üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
 */
function setCachedData(key, data, ttlMinutes = 60) {
  const cacheKey = `cache_${key}`;
  const timestampKey = `cache_${key}_timestamp`;
  
  try {
    const properties = PropertiesService.getScriptProperties();
    properties.setProperty(cacheKey, JSON.stringify(data));
    properties.setProperty(timestampKey, Date.now().toString());
    
    logDebug(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: ${key} (TTL: ${ttlMinutes}–º)`, 'CACHE');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à ${key}: ${error.message}`, 'CACHE');
  }
}

// ======================================================================
// ========================== MIGRATION –§–£–ù–ö–¶–ò–ò ========================
// ======================================================================

/**
 * üöÄ –§–£–ù–ö–¶–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ WB API v2
 */
function migrateToWbApiV2() {
  logDebug('üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ WB API v2', 'MIGRATION');
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getWbFeedbacks
    const oldFunction = getWbFeedbacks.toString();
    const newFunction = getWbFeedbacksV2.toString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –∫–∞–∫ backup
    PropertiesService.getScriptProperties().setProperty('wb_api_v1_backup', oldFunction);
    
    logSuccess('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ WB API v2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'MIGRATION');
    return true;
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ WB API v2: ${error.message}`, 'MIGRATION');
    return false;
  }
}

/**
 * üöÄ –§–£–ù–ö–¶–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Ozon API
 */
function migrateToOzonApiFixed() {
  logDebug('üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Ozon API', 'MIGRATION');
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getOzonFeedbacks
    const oldFunction = getOzonFeedbacks.toString();
    const newFunction = getOzonFeedbacksFixed.toString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –∫–∞–∫ backup
    PropertiesService.getScriptProperties().setProperty('ozon_api_old_backup', oldFunction);
    
    logSuccess('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Ozon API –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'MIGRATION');
    return true;
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Ozon API: ${error.message}`, 'MIGRATION');
    return false;
  }
}

/**
 * üöÄ –§–£–ù–ö–¶–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò: –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
 */
function performFullMigration() {
  log('üöÄ ===== –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ =====', 'INFO', 'MIGRATION');
  
  const results = {
    wbApiV2: false,
    ozonApiFixed: false,
    smartTriggers: false,
    caching: false
  };
  
  try {
    // 1. –ú–∏–≥—Ä–∞—Ü–∏—è WB API v2
    log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è WB API v2...', 'INFO', 'MIGRATION');
    results.wbApiV2 = migrateToWbApiV2();
    
    // 2. –ú–∏–≥—Ä–∞—Ü–∏—è Ozon API
    log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è Ozon API...', 'INFO', 'MIGRATION');
    results.ozonApiFixed = migrateToOzonApiFixed();
    
    // 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–º–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–º–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤...', 'INFO', 'MIGRATION');
    results.smartTriggers = setupSmartTriggers();
    
    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...', 'INFO', 'MIGRATION');
    setCachedData('test', { test: true }, 1);
    const cached = getCachedData('test');
    results.caching = cached && cached.test === true;
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    const successCount = Object.values(results).filter(Boolean).length;
    const totalCount = Object.keys(results).length;
    
    log(`üìä –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount}/${totalCount} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ`, 'INFO', 'MIGRATION');
    
    if (successCount === totalCount) {
      logSuccess('üéâ –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!', 'MIGRATION');
    } else {
      logWarning(`‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏`, 'MIGRATION');
    }
    
    return results;
    
  } catch (error) {
    logError(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${error.message}`, 'MIGRATION');
    return results;
  }
}