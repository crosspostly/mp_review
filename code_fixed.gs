// –í–†–ï–ú–ï–ù–ù–´–ô –§–ê–ô–õ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö
// –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤

// ============ ADVANCED PROCESSING FUNCTIONS ============

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤ Wildberries
 * –ü–æ–ª–µ–∑–Ω–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
 */
function processWildberriesStores() {
  const devMode = isDevMode();
  log(`--- –ó–ê–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò WILDBERRIES (${devMode ? '–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê' : '–ë–û–ï–í–û–ô –†–ï–ñ–ò–ú'}) ---`);
  const wbStores = getStores().filter(s => s.isActive && s.marketplace === 'Wildberries');
  
  if (wbStores.length === 0) {
    log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ Wildberries –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
    return;
  }
  
  log(`–ù–∞–π–¥–µ–Ω–æ ${wbStores.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ WB.`);
  processStoresWithTimeControl(wbStores, devMode);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤ Ozon
 * –ü–æ–ª–µ–∑–Ω–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
 */
function processOzonStores() {
  const devMode = isDevMode();
  log(`--- –ó–ê–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò OZON (${devMode ? '–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê' : '–ë–û–ï–í–û–ô –†–ï–ñ–ò–ú'}) ---`);
  const ozonStores = getStores().filter(s => s.isActive && s.marketplace === 'Ozon');
  
  if (ozonStores.length === 0) {
    log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ Ozon –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
    return;
  }
  
  log(`–ù–∞–π–¥–µ–Ω–æ ${ozonStores.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ Ozon.`);
  processStoresWithTimeControl(ozonStores, devMode);
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏
 * @param {Array} stores - –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param {boolean} devMode - –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
 */
function processStoresWithTimeControl(stores, devMode) {
  const maxExecutionTime = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –ª–∏–º–∏—Ç
  const startTime = Date.now();
  let processedCount = 0;
  
  for (const store of stores) {
    const elapsedTime = Date.now() - startTime;
    const remainingTime = maxExecutionTime - elapsedTime;
    
    if (remainingTime < 30000) {
      log(`‚è±Ô∏è –û–°–¢–ê–ù–û–í–ö–ê: –æ—Å—Ç–∞–ª–æ—Å—å ${Math.round(remainingTime/1000)} —Å–µ–∫`);
      log(`üìä –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}/${stores.length} –º–∞–≥–∞–∑–∏–Ω–æ–≤`);
      break;
    }
    
    log(`--- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${store.name} [${store.marketplace}] (${processedCount + 1}/${stores.length}) ---`);
    log(`‚è±Ô∏è –í—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å: ${Math.round(remainingTime/1000)} —Å–µ–∫`);
    
    const storeStartTime = Date.now();
    processSingleStore(store, devMode);
    const storeDuration = Date.now() - storeStartTime;
    
    processedCount++;
    log(`--- –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${store.name} (${Math.round(storeDuration/1000)} —Å–µ–∫) ---`);
  }
  
  const totalDuration = Date.now() - startTime;
  log(`--- –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: ${processedCount}/${stores.length} –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∑–∞ ${Math.round(totalDuration/1000)} —Å–µ–∫ ---`);
}