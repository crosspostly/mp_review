/**
 * üß™ –¢–ï–°–¢ –°–†–ê–í–ù–ï–ù–ò–Ø WB API v1 vs v2
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ—Ç—ã WB API v2
 * –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–º–µ–Ω—ã v1 –Ω–∞ v2.
 */

/**
 * üß™ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Ç—ã WB API v2
 */
function testWbApiV2Completeness() {
  logDebug('üß™ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Ç—ã WB API v2', 'WB-COMPARISON');
  
  const results = {
    v1Features: [],
    v2Features: [],
    missingFeatures: [],
    additionalFeatures: [],
    canReplace: false
  };
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v1
    results.v1Features = [
      '–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤',
      '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ isAnswered',
      '–ü–∞–≥–∏–Ω–∞—Ü–∏—è (take/skip)',
      '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ',
      '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫',
      'Rate limiting'
    ];
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v2
    results.v2Features = [
      '–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤',
      '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ isAnswered',
      '–ü–∞–≥–∏–Ω–∞—Ü–∏—è (take/skip)',
      '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ',
      '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫',
      'Rate limiting',
      '–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ (dateFrom/dateTo)',
      '–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (valuation)',
      '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä—É (nmId)',
      '–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π API'
    ];
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ v2 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v1
    results.missingFeatures = results.v1Features.filter(feature => 
      !results.v2Features.includes(feature)
    );
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v2
    results.additionalFeatures = results.v2Features.filter(feature => 
      !results.v1Features.includes(feature)
    );
    
    // 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã
    results.canReplace = results.missingFeatures.length === 0;
    
    // 6. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logDebug(`üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v1: ${results.v1Features.length}`, 'WB-COMPARISON');
    logDebug(`üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v2: ${results.v2Features.length}`, 'WB-COMPARISON');
    logDebug(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ v2: ${results.missingFeatures.length}`, 'WB-COMPARISON');
    logDebug(`‚ú® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤ v2: ${results.additionalFeatures.length}`, 'WB-COMPARISON');
    logDebug(`üîÑ –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å: ${results.canReplace}`, 'WB-COMPARISON');
    
    if (results.canReplace) {
      logSuccess('‚úÖ WB API v2 –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã–≤–∞–µ—Ç v1!', 'WB-COMPARISON');
      logSuccess(`‚ú® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v2: ${results.additionalFeatures.join(', ')}`, 'WB-COMPARISON');
    } else {
      logError(`‚ùå v2 –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç v1. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${results.missingFeatures.join(', ')}`, 'WB-COMPARISON');
    }
    
    return results;
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ—Ç—ã v2: ${error.message}`, 'WB-COMPARISON');
    return results;
  }
}

/**
 * üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ WB API v2
 */
function testWbApiV2Functionality() {
  logDebug('üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ WB API v2', 'WB-FUNCTIONALITY');
  
  const results = {
    basicFunctionality: false,
    dateFiltering: false,
    ratingFiltering: false,
    productFiltering: false,
    errorHandling: false,
    performance: false
  };
  
  try {
    // 1. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    results.basicFunctionality = testWbApiV2BasicFunctionality();
    
    // 2. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
    results.dateFiltering = testWbApiV2DateFiltering();
    
    // 3. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    results.ratingFiltering = testWbApiV2RatingFiltering();
    
    // 4. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä—É
    results.productFiltering = testWbApiV2ProductFiltering();
    
    // 5. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    results.errorHandling = testWbApiV2ErrorHandling();
    
    // 6. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    results.performance = testWbApiV2Performance();
    
    // 7. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã
    const successCount = Object.values(results).filter(Boolean).length;
    const totalCount = Object.keys(results).length;
    const successRate = Math.round((successCount / totalCount) * 100);
    
    logDebug(`üìä –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successCount}/${totalCount} (${successRate}%)`, 'WB-FUNCTIONALITY');
    
    if (successRate === 100) {
      logSuccess('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã WB API v2 –ø—Ä–æ–π–¥–µ–Ω—ã!', 'WB-FUNCTIONALITY');
    } else {
      logWarning(`‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã —Ç–µ—Å—Ç—ã WB API v2 (${successRate}%)`, 'WB-FUNCTIONALITY');
    }
    
    return results;
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ v2: ${error.message}`, 'WB-FUNCTIONALITY');
    return results;
  }
}

/**
 * –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ WB API v2
 */
function testWbApiV2BasicFunctionality() {
  logDebug('–¢–µ—Å—Ç: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å WB API v2', 'WB-FUNCTIONALITY');
  
  try {
    // –ú–æ–∫–∞–µ–º UrlFetchApp
    const originalUrlFetchApp = UrlFetchApp;
    global.UrlFetchApp = {
      fetch: function(url, options) {
        return {
          getResponseCode: function() { return 200; },
          getContentText: function() { 
            return JSON.stringify({
              data: {
                feedbacks: [
                  {
                    id: 'test-1',
                    productValuation: 5,
                    text: '–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä!',
                    createdDate: '2024-01-15T10:00:00Z',
                    isAnswered: false
                  }
                ]
              }
            });
          }
        };
      }
    };
    
    try {
      const feedbacks = getWbFeedbacksV2('test-api-key', false, null);
      
      if (!Array.isArray(feedbacks)) {
        throw new Error('getWbFeedbacksV2 –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤');
      }
      
      if (feedbacks.length === 0) {
        throw new Error('getWbFeedbacksV2 –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
      }
      
      logSuccess('‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å WB API v2 —Ä–∞–±–æ—Ç–∞–µ—Ç', 'WB-FUNCTIONALITY');
      return true;
      
    } finally {
      global.UrlFetchApp = originalUrlFetchApp;
    }
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ v2: ${error.message}`, 'WB-FUNCTIONALITY');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ WB API v2
 */
function testWbApiV2DateFiltering() {
  logDebug('–¢–µ—Å—Ç: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ WB API v2', 'WB-FUNCTIONALITY');
  
  try {
    const store = {
      id: 'test-store',
      name: 'Test Store',
      settings: {
        startDate: '2024-01-01'
      }
    };
    
    // –ú–æ–∫–∞–µ–º UrlFetchApp
    const originalUrlFetchApp = UrlFetchApp;
    global.UrlFetchApp = {
      fetch: function(url, options) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ URL –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä dateFrom
        if (!url.includes('dateFrom=2024-01-01')) {
          throw new Error('URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä dateFrom');
        }
        
        return {
          getResponseCode: function() { return 200; },
          getContentText: function() { 
            return JSON.stringify({
              data: {
                feedbacks: []
              }
            });
          }
        };
      }
    };
    
    try {
      const feedbacks = getWbFeedbacksV2('test-api-key', false, store);
      
      logSuccess('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ WB API v2 —Ä–∞–±–æ—Ç–∞–µ—Ç', 'WB-FUNCTIONALITY');
      return true;
      
    } finally {
      global.UrlFetchApp = originalUrlFetchApp;
    }
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ v2: ${error.message}`, 'WB-FUNCTIONALITY');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É WB API v2
 */
function testWbApiV2RatingFiltering() {
  logDebug('–¢–µ—Å—Ç: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É WB API v2', 'WB-FUNCTIONALITY');
  
  try {
    const store = {
      id: 'test-store',
      name: 'Test Store',
      settings: {
        minRating: 4
      }
    };
    
    // –ú–æ–∫–∞–µ–º UrlFetchApp
    const originalUrlFetchApp = UrlFetchApp;
    global.UrlFetchApp = {
      fetch: function(url, options) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ URL –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä valuation
        if (!url.includes('valuation=4')) {
          throw new Error('URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä valuation');
        }
        
        return {
          getResponseCode: function() { return 200; },
          getContentText: function() { 
            return JSON.stringify({
              data: {
                feedbacks: []
              }
            });
          }
        };
      }
    };
    
    try {
      const feedbacks = getWbFeedbacksV2('test-api-key', false, store);
      
      logSuccess('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É WB API v2 —Ä–∞–±–æ—Ç–∞–µ—Ç', 'WB-FUNCTIONALITY');
      return true;
      
    } finally {
      global.UrlFetchApp = originalUrlFetchApp;
    }
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É v2: ${error.message}`, 'WB-FUNCTIONALITY');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä—É WB API v2
 */
function testWbApiV2ProductFiltering() {
  logDebug('–¢–µ—Å—Ç: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä—É WB API v2', 'WB-FUNCTIONALITY');
  
  try {
    const store = {
      id: 'test-store',
      name: 'Test Store',
      settings: {
        nmId: 12345
      }
    };
    
    // –ú–æ–∫–∞–µ–º UrlFetchApp
    const originalUrlFetchApp = UrlFetchApp;
    global.UrlFetchApp = {
      fetch: function(url, options) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ URL –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä nmId
        if (!url.includes('nmId=12345')) {
          throw new Error('URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä nmId');
        }
        
        return {
          getResponseCode: function() { return 200; },
          getContentText: function() { 
            return JSON.stringify({
              data: {
                feedbacks: []
              }
            });
          }
        };
      }
    };
    
    try {
      const feedbacks = getWbFeedbacksV2('test-api-key', false, store);
      
      logSuccess('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä—É WB API v2 —Ä–∞–±–æ—Ç–∞–µ—Ç', 'WB-FUNCTIONALITY');
      return true;
      
    } finally {
      global.UrlFetchApp = originalUrlFetchApp;
    }
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä—É v2: ${error.message}`, 'WB-FUNCTIONALITY');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ WB API v2
 */
function testWbApiV2ErrorHandling() {
  logDebug('–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WB API v2', 'WB-FUNCTIONALITY');
  
  try {
    // –ú–æ–∫–∞–µ–º UrlFetchApp –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—à–∏–±–∫–∏
    const originalUrlFetchApp = UrlFetchApp;
    global.UrlFetchApp = {
      fetch: function(url, options) {
        return {
          getResponseCode: function() { return 401; },
          getContentText: function() { 
            return JSON.stringify({ error: 'Unauthorized' });
          }
        };
      }
    };
    
    try {
      const feedbacks = getWbFeedbacksV2('invalid-key', false, null);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      if (!Array.isArray(feedbacks)) {
        throw new Error('–ü—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –º–∞—Å—Å–∏–≤');
      }
      
      logSuccess('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WB API v2 —Ä–∞–±–æ—Ç–∞–µ—Ç', 'WB-FUNCTIONALITY');
      return true;
      
    } finally {
      global.UrlFetchApp = originalUrlFetchApp;
    }
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ v2: ${error.message}`, 'WB-FUNCTIONALITY');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ WB API v2
 */
function testWbApiV2Performance() {
  logDebug('–¢–µ—Å—Ç: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å WB API v2', 'WB-FUNCTIONALITY');
  
  try {
    const startTime = Date.now();
    
    // –ú–æ–∫–∞–µ–º UrlFetchApp
    const originalUrlFetchApp = UrlFetchApp;
    global.UrlFetchApp = {
      fetch: function(url, options) {
        return {
          getResponseCode: function() { return 200; },
          getContentText: function() { 
            return JSON.stringify({
              data: {
                feedbacks: Array(100).fill().map((_, i) => ({
                  id: `test-${i}`,
                  productValuation: 5,
                  text: `Test feedback ${i}`,
                  createdDate: new Date().toISOString(),
                  isAnswered: false
                }))
              }
            });
          }
        };
      }
    };
    
    try {
      const feedbacks = getWbFeedbacksV2('test-api-key', false, null);
      
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      logDebug(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}–º—Å`, 'WB-FUNCTIONALITY');
      
      if (duration > 1000) {
        logWarning('‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å WB API v2', 'WB-FUNCTIONALITY');
        return false;
      } else {
        logSuccess('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å WB API v2 –≤ –Ω–æ—Ä–º–µ', 'WB-FUNCTIONALITY');
        return true;
      }
      
    } finally {
      global.UrlFetchApp = originalUrlFetchApp;
    }
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ v2: ${error.message}`, 'WB-FUNCTIONALITY');
    return false;
  }
}

/**
 * üß™ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ WB API v1 vs v2
 */
function runWbApiComparison() {
  log('üß™ ===== –°–†–ê–í–ù–ï–ù–ò–ï WB API v1 vs v2 =====', 'INFO', 'WB-COMPARISON');
  
  try {
    // 1. –¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Ç—ã v2
    const completenessResults = testWbApiV2Completeness();
    
    // 2. –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ v2
    const functionalityResults = testWbApiV2Functionality();
    
    // 3. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    const canReplace = completenessResults.canReplace && 
                      Object.values(functionalityResults).every(Boolean);
    
    log('üß™ ===== –ò–¢–û–ì–ò –°–†–ê–í–ù–ï–ù–ò–Ø =====', 'INFO', 'WB-COMPARISON');
    log(`üìä –ü–æ–ª–Ω–æ—Ç–∞ v2: ${completenessResults.canReplace ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`, 'INFO', 'WB-COMPARISON');
    log(`üìä –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å v2: ${Object.values(functionalityResults).every(Boolean) ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`, 'INFO', 'WB-COMPARISON');
    log(`üîÑ –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å v1 –Ω–∞ v2: ${canReplace ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`, 'INFO', 'WB-COMPARISON');
    
    if (canReplace) {
      logSuccess('üéâ WB API v2 –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–Ø–ï–¢ v1!', 'WB-COMPARISON');
      logSuccess('‚ú® –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å v1 –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ v2', 'WB-COMPARISON');
    } else {
      logError('‚ùå v2 –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç—å v1', 'WB-COMPARISON');
    }
    
    return {
      completeness: completenessResults,
      functionality: functionalityResults,
      canReplace: canReplace
    };
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è WB API: ${error.message}`, 'WB-COMPARISON');
    return null;
  }
}