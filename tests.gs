/**
 * üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ unit-—Ç–µ—Å—Ç—ã, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ –º–æ–∫-—Ç–µ—Å—Ç—ã
 * –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã.
 * 
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–∑–æ–≤–∏—Ç–µ runAllTests()
 */

// ======================================================================
// ========================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í ======================
// ======================================================================

const TEST_CONFIG = {
  ENABLE_LOGGING: true,
  MOCK_API_RESPONSES: true,
  TEST_TIMEOUT: 30000, // 30 —Å–µ–∫—É–Ω–¥
  MAX_TEST_ITERATIONS: 10
};

// ======================================================================
// ========================== –ú–û–ö-–î–ê–ù–ù–´–ï ===============================
// ======================================================================

/**
 * –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WB API
 */
const MOCK_WB_FEEDBACKS = [
  {
    id: "test-wb-1",
    productValuation: 5,
    text: "–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä!",
    createdDate: "2024-01-15T10:00:00Z",
    isAnswered: false,
    productDetails: {
      nmId: 12345,
      productName: "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä WB"
    }
  },
  {
    id: "test-wb-2", 
    productValuation: 3,
    text: "–ù–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –º–æ–≥–ª–æ –±—ã—Ç—å –ª—É—á—à–µ",
    createdDate: "2024-01-14T15:30:00Z",
    isAnswered: true,
    productDetails: {
      nmId: 67890,
      productName: "–î—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä WB"
    }
  }
];

/**
 * –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Ozon API
 */
const MOCK_OZON_FEEDBACKS = [
  {
    id: "test-ozon-1",
    rating: 5,
    text: "–°—É–ø–µ—Ä –∫–∞—á–µ—Å—Ç–≤–æ!",
    created_at: "2024-01-15T12:00:00Z",
    is_answered: false,
    product: {
      offer_id: "ozon-123",
      name: "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä Ozon"
    }
  },
  {
    id: "test-ozon-2",
    rating: 2,
    text: "–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å",
    created_at: "2024-01-14T18:45:00Z", 
    is_answered: true,
    product: {
      offer_id: "ozon-456",
      name: "–î—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä Ozon"
    }
  }
];

/**
 * –ú–æ–∫-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
 */
const MOCK_STORE = {
  id: "test-store-1",
  name: "–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω",
  marketplace: "wb",
  isActive: true,
  credentials: {
    apiKey: "test-api-key-123"
  },
  settings: {
    startDate: "2024-01-01",
    sortOldestFirst: false,
    minRating: 3
  }
};

// ======================================================================
// ========================== –ú–û–ö-–§–£–ù–ö–¶–ò–ò ==============================
// ======================================================================

/**
 * –ú–æ–∫ UrlFetchApp –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤
 */
function createMockUrlFetchApp() {
  return {
    fetch: function(url, options) {
      logDebug(`Mock API call: ${url}`, 'MOCK-API');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø API –ø–æ URL
      if (url.includes('wildberries.ru')) {
        return createMockWbResponse(url, options);
      } else if (url.includes('api.ozon.ru')) {
        return createMockOzonResponse(url, options);
      }
      
      return createMockErrorResponse(404, 'Unknown API endpoint');
    }
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–æ—Ç–≤–µ—Ç –¥–ª—è WB API
 */
function createMockWbResponse(url, options) {
  const isAnswered = url.includes('isAnswered=true');
  const feedbacks = isAnswered ? 
    MOCK_WB_FEEDBACKS.filter(f => f.isAnswered) : 
    MOCK_WB_FEEDBACKS.filter(f => !f.isAnswered);
    
  return {
    getResponseCode: () => 200,
    getContentText: () => JSON.stringify({
      data: {
        feedbacks: feedbacks
      }
    })
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–æ—Ç–≤–µ—Ç –¥–ª—è Ozon API
 */
function createMockOzonResponse(url, options) {
  const isAnswered = url.includes('is_answered=true');
  const feedbacks = isAnswered ?
    MOCK_OZON_FEEDBACKS.filter(f => f.is_answered) :
    MOCK_OZON_FEEDBACKS.filter(f => !f.is_answered);
    
  return {
    getResponseCode: () => 200,
    getContentText: () => JSON.stringify({
      result: {
        reviews: feedbacks
      }
    })
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
 */
function createMockErrorResponse(code, message) {
  return {
    getResponseCode: () => code,
    getContentText: () => JSON.stringify({
      error: message
    })
  };
}

// ======================================================================
// ========================== UNIT-–¢–ï–°–¢–´ ===============================
// ======================================================================

/**
 * üß™ –¢–µ—Å—Ç API —Ñ—É–Ω–∫—Ü–∏–π WB
 */
function testWbApiFunctions() {
  logDebug('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ WB API', 'TEST');
  
  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
    testGetWbFeedbacks();
    
    // –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    testSendWbFeedbackAnswer();
    
    // –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
    testWbApiErrorHandling();
    
    logSuccess('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã WB API –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ', 'TEST');
    return true;
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö WB API: ${error.message}`, 'TEST');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ WB
 */
function testGetWbFeedbacks() {
  logDebug('–¢–µ—Å—Ç: getWbFeedbacks()', 'TEST-WB');
  
  // –ú–æ–∫–∞–µ–º UrlFetchApp
  const originalUrlFetchApp = UrlFetchApp;
  global.UrlFetchApp = createMockUrlFetchApp();
  
  try {
    const feedbacks = getWbFeedbacks('test-api-key', false, MOCK_STORE);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!Array.isArray(feedbacks)) {
      throw new Error('getWbFeedbacks –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤');
    }
    
    if (feedbacks.length === 0) {
      throw new Error('getWbFeedbacks –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—Ç–∑—ã–≤—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–∑—ã–≤–∞
    const feedback = feedbacks[0];
    if (!feedback.id || !feedback.text || !feedback.createdDate) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–∑—ã–≤–∞');
    }
    
    logSuccess('‚úÖ getWbFeedbacks() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-WB');
    
  } finally {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π UrlFetchApp
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

/**
 * –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ WB
 */
function testSendWbFeedbackAnswer() {
  logDebug('–¢–µ—Å—Ç: sendWbFeedbackAnswer()', 'TEST-WB');
  
  // –ú–æ–∫–∞–µ–º UrlFetchApp
  const originalUrlFetchApp = UrlFetchApp;
  global.UrlFetchApp = createMockUrlFetchApp();
  
  try {
    const result = sendWbFeedbackAnswer('test-feedback-id', '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', 'test-api-key');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!result || typeof result !== 'object') {
      throw new Error('sendWbFeedbackAnswer –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç');
    }
    
    if (!result.status) {
      throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞—Ç—É—Å');
    }
    
    logSuccess('‚úÖ sendWbFeedbackAnswer() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-WB');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ WB API
 */
function testWbApiErrorHandling() {
  logDebug('–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WB API', 'TEST-WB');
  
  // –ú–æ–∫–∞–µ–º UrlFetchApp –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—à–∏–±–∫–∏
  const originalUrlFetchApp = UrlFetchApp;
  global.UrlFetchApp = {
    fetch: () => createMockErrorResponse(401, 'Unauthorized')
  };
  
  try {
    const feedbacks = getWbFeedbacks('invalid-key', false, MOCK_STORE);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (!Array.isArray(feedbacks)) {
      throw new Error('–ü—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    }
    
    logSuccess('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WB API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-WB');
    
  } finally {
    global.UrlFetchApp = originalUrlFetchApp;
  }
}

/**
 * üß™ –¢–µ—Å—Ç API —Ñ—É–Ω–∫—Ü–∏–π Ozon
 */
function testOzonApiFunctions() {
  logDebug('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Ozon API', 'TEST');
  
  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
    testGetOzonFeedbacks();
    
    // –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    testSendOzonFeedbackAnswer();
    
    // –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
    testOzonApiErrorHandling();
    
    logSuccess('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã Ozon API –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ', 'TEST');
    return true;
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö Ozon API: ${error.message}`, 'TEST');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ Ozon
 */
function testGetOzonFeedbacks() {
  logDebug('–¢–µ—Å—Ç: getOzonFeedbacks()', 'TEST-OZON');
  
  try {
    const feedbacks = getOzonFeedbacks('test-client-id', 'test-api-key', false, MOCK_STORE);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!Array.isArray(feedbacks)) {
      throw new Error('getOzonFeedbacks –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤');
    }
    
    logSuccess('‚úÖ getOzonFeedbacks() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-OZON');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ getOzonFeedbacks: ${error.message}`, 'TEST-OZON');
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ Ozon
 */
function testSendOzonFeedbackAnswer() {
  logDebug('–¢–µ—Å—Ç: sendOzonFeedbackAnswer()', 'TEST-OZON');
  
  try {
    const result = sendOzonFeedbackAnswer('test-feedback-id', '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', 'test-client-id', 'test-api-key');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!result || typeof result !== 'object') {
      throw new Error('sendOzonFeedbackAnswer –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç');
    }
    
    logSuccess('‚úÖ sendOzonFeedbackAnswer() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-OZON');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ sendOzonFeedbackAnswer: ${error.message}`, 'TEST-OZON');
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Ozon API
 */
function testOzonApiErrorHandling() {
  logDebug('–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Ozon API', 'TEST-OZON');
  
  try {
    const feedbacks = getOzonFeedbacks('invalid-client-id', 'invalid-api-key', false, MOCK_STORE);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (!Array.isArray(feedbacks)) {
      throw new Error('–ü—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    }
    
    logSuccess('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Ozon API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-OZON');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫ Ozon API: ${error.message}`, 'TEST-OZON');
    throw error;
  }
}

/**
 * üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
 */
function testTriggerSystem() {
  logDebug('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤', 'TEST');
  
  try {
    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞
    testCreateTrigger();
    
    // –¢–µ—Å—Ç 2: –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞
    testDeleteTrigger();
    
    // –¢–µ—Å—Ç 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    testSyncTriggers();
    
    // –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    testTriggerIntegrity();
    
    logSuccess('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ', 'TEST');
    return true;
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: ${error.message}`, 'TEST');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
 */
function testCreateTrigger() {
  logDebug('–¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞', 'TEST-TRIGGER');
  
  try {
    const store = { ...MOCK_STORE, id: 'test-trigger-store' };
    const result = ensureStoreTrigger(store, 5);
    
    if (!result) {
      throw new Error('ensureStoreTrigger –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏');
    }
    
    logSuccess('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-TRIGGER');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞: ${error.message}`, 'TEST-TRIGGER');
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
 */
function testDeleteTrigger() {
  logDebug('–¢–µ—Å—Ç: –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞', 'TEST-TRIGGER');
  
  try {
    const result = deleteStoreTrigger('test-trigger-store');
    
    if (!result) {
      throw new Error('deleteStoreTrigger –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏');
    }
    
    logSuccess('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-TRIGGER');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞: ${error.message}`, 'TEST-TRIGGER');
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
 */
function testSyncTriggers() {
  logDebug('–¢–µ—Å—Ç: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤', 'TEST-TRIGGER');
  
  try {
    const result = syncAllStoreTriggers();
    
    if (!result) {
      throw new Error('syncAllStoreTriggers –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    }
    
    logSuccess('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-TRIGGER');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: ${error.message}`, 'TEST-TRIGGER');
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
 */
function testTriggerIntegrity() {
  logDebug('–¢–µ—Å—Ç: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤', 'TEST-TRIGGER');
  
  try {
    const result = validateTriggerIntegrity();
    
    if (typeof result !== 'object') {
      throw new Error('validateTriggerIntegrity –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç');
    }
    
    if (typeof result.isValid !== 'boolean') {
      throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å isValid');
    }
    
    logSuccess('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-TRIGGER');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: ${error.message}`, 'TEST-TRIGGER');
    throw error;
  }
}

/**
 * üß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */
function testDataProcessing() {
  logDebug('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'TEST');
  
  try {
    // –¢–µ—Å—Ç 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
    testDateFiltering();
    
    // –¢–µ—Å—Ç 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    testRatingFiltering();
    
    // –¢–µ—Å—Ç 3: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    testSorting();
    
    // –¢–µ—Å—Ç 4: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    testDataNormalization();
    
    logSuccess('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ', 'TEST');
    return true;
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'TEST');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
 */
function testDateFiltering() {
  logDebug('–¢–µ—Å—Ç: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ', 'TEST-DATA');
  
  try {
    const mockFeedbacks = [
      { id: '1', createdDate: '2024-01-15T10:00:00Z' },
      { id: '2', createdDate: '2024-01-10T10:00:00Z' },
      { id: '3', createdDate: '2024-01-20T10:00:00Z' }
    ];
    
    const store = {
      settings: {
        startDate: '2024-01-12'
      }
    };
    
    const filtered = filterFeedbacksByDate(mockFeedbacks, store);
    
    if (filtered.length !== 2) {
      throw new Error(`–û–∂–∏–¥–∞–ª–æ—Å—å 2 –æ—Ç–∑—ã–≤–∞, –ø–æ–ª—É—á–µ–Ω–æ ${filtered.length}`);
    }
    
    logSuccess('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-DATA');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ: ${error.message}`, 'TEST-DATA');
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
 */
function testRatingFiltering() {
  logDebug('–¢–µ—Å—Ç: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É', 'TEST-DATA');
  
  try {
    const mockFeedbacks = [
      { id: '1', productValuation: 5 },
      { id: '2', productValuation: 3 },
      { id: '3', productValuation: 1 }
    ];
    
    const store = {
      settings: {
        minRating: 3
      }
    };
    
    const filtered = filterFeedbacksByRating(mockFeedbacks, store);
    
    if (filtered.length !== 2) {
      throw new Error(`–û–∂–∏–¥–∞–ª–æ—Å—å 2 –æ—Ç–∑—ã–≤–∞, –ø–æ–ª—É—á–µ–Ω–æ ${filtered.length}`);
    }
    
    logSuccess('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-DATA');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É: ${error.message}`, 'TEST-DATA');
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
function testSorting() {
  logDebug('–¢–µ—Å—Ç: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', 'TEST-DATA');
  
  try {
    const mockFeedbacks = [
      { id: '1', createdDate: '2024-01-15T10:00:00Z' },
      { id: '2', createdDate: '2024-01-10T10:00:00Z' },
      { id: '3', createdDate: '2024-01-20T10:00:00Z' }
    ];
    
    const store = {
      settings: {
        sortOldestFirst: false
      }
    };
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–ª–∏—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const mockSheet = {
      getLastRow: () => 4,
      getRange: () => ({
        getValues: () => [
          ['‚Ññ', '–î–∞—Ç–∞', '–¢–µ–∫—Å—Ç'],
          ['1', '2024-01-15', '–û—Ç–∑—ã–≤ 1'],
          ['2', '2024-01-10', '–û—Ç–∑—ã–≤ 2'],
          ['3', '2024-01-20', '–û—Ç–∑—ã–≤ 3']
        ],
        setValues: () => {}
      })
    };
    
    applySortingPreferences(mockSheet, store);
    
    logSuccess('‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-DATA');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ: ${error.message}`, 'TEST-DATA');
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */
function testDataNormalization() {
  logDebug('–¢–µ—Å—Ç: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', 'TEST-DATA');
  
  try {
    // –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ WB –¥–∞–Ω–Ω—ã—Ö
    const wbFeedback = MOCK_WB_FEEDBACKS[0];
    const normalized = processFeedbackBatch([wbFeedback], [], MOCK_STORE, true);
    
    if (!Array.isArray(normalized)) {
      throw new Error('processFeedbackBatch –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤');
    }
    
    logSuccess('‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST-DATA');
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'TEST-DATA');
    throw error;
  }
}

// ======================================================================
// ========================== –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ =====================
// ======================================================================

/**
 * üß™ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞
 */
function testFullStoreProcessing() {
  logDebug('üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞', 'TEST');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω
    const testStore = { ...MOCK_STORE, id: 'integration-test-store' };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–≥–∞–∑–∏–Ω
    const saveResult = saveStore(testStore);
    if (!saveResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω');
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
    const processResult = processSingleStore(testStore, true);
    if (!processResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω');
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω
    const deleteResult = deleteStore(testStore.id);
    if (!deleteResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω');
    }
    
    logSuccess('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ', 'TEST');
    return true;
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ: ${error.message}`, 'TEST');
    return false;
  }
}

/**
 * üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
function testProgressSystem() {
  logDebug('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞', 'TEST');
  
  try {
    const storeId = 'test-progress-store';
    
    // –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressData = { lastPage: 5, timestamp: new Date().toISOString() };
    const saveResult = updateStoreProgress(storeId, progressData);
    if (!saveResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å');
    }
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const retrievedProgress = getStoreProgress(storeId);
    if (!retrievedProgress || retrievedProgress.lastPage !== 5) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å');
    }
    
    // –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const resetResult = resetStoreProgress(storeId);
    if (!resetResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å');
    }
    
    logSuccess('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'TEST');
    return true;
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${error.message}`, 'TEST');
    return false;
  }
}

// ======================================================================
// ========================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =============
// ======================================================================

/**
 * üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
function runAllTests() {
  log('üß™ ===== –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====', 'INFO', 'TEST-SUITE');
  
  const results = {
    total: 0,
    passed: 0,
    failed: 0,
    errors: []
  };
  
  const testSuites = [
    { name: 'WB API Functions', test: testWbApiFunctions },
    { name: 'Ozon API Functions', test: testOzonApiFunctions },
    { name: 'Trigger System', test: testTriggerSystem },
    { name: 'Data Processing', test: testDataProcessing },
    { name: 'Full Store Processing', test: testFullStoreProcessing },
    { name: 'Progress System', test: testProgressSystem }
  ];
  
  for (const suite of testSuites) {
    results.total++;
    log(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: ${suite.name}`, 'INFO', 'TEST-SUITE');
    
    try {
      const success = suite.test();
      if (success) {
        results.passed++;
        logSuccess(`‚úÖ ${suite.name} - –ü–†–û–ô–î–ï–ù`, 'TEST-SUITE');
      } else {
        results.failed++;
        logError(`‚ùå ${suite.name} - –ü–†–û–í–ê–õ–ï–ù`, 'TEST-SUITE');
      }
    } catch (error) {
      results.failed++;
      results.errors.push(`${suite.name}: ${error.message}`);
      logError(`‚ùå ${suite.name} - –û–®–ò–ë–ö–ê: ${error.message}`, 'TEST-SUITE');
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('üß™ ===== –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====', 'INFO', 'TEST-SUITE');
  log(`üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.total}`, 'INFO', 'TEST-SUITE');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${results.passed}`, 'SUCCESS', 'TEST-SUITE');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.failed}`, 'ERROR', 'TEST-SUITE');
  
  if (results.errors.length > 0) {
    log('üîç –û—à–∏–±–∫–∏:', 'WARNING', 'TEST-SUITE');
    results.errors.forEach(error => {
      log(`  - ${error}`, 'ERROR', 'TEST-SUITE');
    });
  }
  
  const successRate = Math.round((results.passed / results.total) * 100);
  log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`, 'INFO', 'TEST-SUITE');
  
  if (successRate === 100) {
    logSuccess('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!', 'TEST-SUITE');
  } else {
    logWarning(`‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${results.failed} —Ç–µ—Å—Ç–æ–≤`, 'TEST-SUITE');
  }
  
  return results;
}

/**
 * üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */
function runQuickTests() {
  log('üß™ ===== –ë–´–°–¢–†–´–ï –¢–ï–°–¢–´ =====', 'INFO', 'QUICK-TEST');
  
  const criticalTests = [
    { name: 'WB API', test: testWbApiFunctions },
    { name: 'Ozon API', test: testOzonApiFunctions },
    { name: 'Triggers', test: testTriggerSystem }
  ];
  
  let passed = 0;
  let total = criticalTests.length;
  
  for (const test of criticalTests) {
    try {
      if (test.test()) {
        passed++;
        logSuccess(`‚úÖ ${test.name}`, 'QUICK-TEST');
      } else {
        logError(`‚ùå ${test.name}`, 'QUICK-TEST');
      }
    } catch (error) {
      logError(`‚ùå ${test.name}: ${error.message}`, 'QUICK-TEST');
    }
  }
  
  log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`, 'INFO', 'QUICK-TEST');
  return passed === total;
}

/**
 * üß™ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
function runPerformanceTests() {
  log('üß™ ===== –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò =====', 'INFO', 'PERF-TEST');
  
  const startTime = Date.now();
  
  try {
    // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤
    const largeFeedbackSet = Array(1000).fill().map((_, i) => ({
      id: `perf-test-${i}`,
      productValuation: Math.floor(Math.random() * 5) + 1,
      text: `–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ ${i}`,
      createdDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
      isAnswered: Math.random() > 0.5
    }));
    
    const processStart = Date.now();
    const processed = processFeedbackBatch(largeFeedbackSet, [], MOCK_STORE, true);
    const processTime = Date.now() - processStart;
    
    log(`‚ö° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${largeFeedbackSet.length} –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ ${processTime}–º—Å`, 'INFO', 'PERF-TEST');
    log(`üìä –°–∫–æ—Ä–æ—Å—Ç—å: ${Math.round(largeFeedbackSet.length / (processTime / 1000))} –æ—Ç–∑—ã–≤–æ–≤/—Å–µ–∫`, 'INFO', 'PERF-TEST');
    
    const totalTime = Date.now() - startTime;
    log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${totalTime}–º—Å`, 'INFO', 'PERF-TEST');
    
    return true;
    
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${error.message}`, 'PERF-TEST');
    return false;
  }
}