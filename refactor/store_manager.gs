/**
 * üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –°–¢–ê–¢–ò–°–¢–ò–ö–ò
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª getApiStatsTracker()
 */

console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...\n');

// –≠–º—É–ª—è—Ü–∏—è Google Apps Script —Å—Ä–µ–¥—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockPropertiesService = {
  data: {},
  getProperty: function(key) { 
    return this.data[key] || null; 
  },
  setProperty: function(key, value) { 
    this.data[key] = value; 
  },
  deleteProperty: function(key) { 
    delete this.data[key]; 
  }
};

// –≠–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logDebug(msg) { console.log(`[DEBUG] ${msg}`); }
function logWarning(msg) { console.log(`[WARNING] ${msg}`); }
function logError(msg) { console.log(`[ERROR] ${msg}`); }
function logInfo(msg) { console.log(`[INFO] ${msg}`); }

// –≠–º—É–ª—è—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ 
const LOG_CONFIG = {
  CATEGORIES: {
    SYSTEM: 'SYSTEM'
  }
};

// –ö–æ–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é getApiStatsTracker
function getApiStatsTracker() {
  return {
    incrementRequests: function(marketplace) {
      try {
        const props = mockPropertiesService;
        const key = `API_REQUESTS_${marketplace.toUpperCase()}`;
        const current = parseInt(props.getProperty(key) || '0');
        props.setProperty(key, (current + 1).toString());
        
        logDebug(`API Stats: –ó–∞–ø—Ä–æ—Å–æ–≤ ${marketplace}: ${current + 1}`);
      } catch (error) {
        logWarning(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: ${error.message}`);
      }
    },
    
    incrementErrors: function(marketplace) {
      try {
        const props = mockPropertiesService;
        const key = `API_ERRORS_${marketplace.toUpperCase()}`;
        const current = parseInt(props.getProperty(key) || '0');
        props.setProperty(key, (current + 1).toString());
        
        logWarning(`API Stats: –û—à–∏–±–æ–∫ ${marketplace}: ${current + 1}`);
      } catch (error) {
        logWarning(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫: ${error.message}`);
      }
    },
    
    recordResponseTime: function(marketplace, responseTime) {
      try {
        const props = mockPropertiesService;
        const key = `API_AVG_TIME_${marketplace.toUpperCase()}`;
        const countKey = `API_TIME_COUNT_${marketplace.toUpperCase()}`;
        const totalKey = `API_TOTAL_TIME_${marketplace.toUpperCase()}`;
        
        const currentAvg = parseFloat(props.getProperty(key) || '0');
        const currentCount = parseInt(props.getProperty(countKey) || '0');
        const currentTotal = parseInt(props.getProperty(totalKey) || '0');
        
        const newTotal = currentTotal + responseTime;
        const newCount = currentCount + 1;
        const newAvg = newTotal / newCount;
        
        props.setProperty(key, newAvg.toFixed(2));
        props.setProperty(countKey, newCount.toString());
        props.setProperty(totalKey, newTotal.toString());
        
        logDebug(`API Stats: –í—Ä–µ–º—è ${marketplace}: ${responseTime}ms (—Å—Ä–µ–¥–Ω–µ–µ: ${newAvg.toFixed(2)}ms)`);
      } catch (error) {
        logWarning(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
      }
    },
    
    getStats: function(marketplace) {
      try {
        const props = mockPropertiesService;
        
        if (marketplace === 'all') {
          const ozStats = this.getStats('ozon');
          const wbStats = this.getStats('wildberries');
          
          return {
            total: {
              requests: ozStats.requests + wbStats.requests,
              errors: ozStats.errors + wbStats.errors,
              averageResponseTime: ((ozStats.averageResponseTime * ozStats.requests) + 
                                   (wbStats.averageResponseTime * wbStats.requests)) / 
                                   (ozStats.requests + wbStats.requests) || 0
            },
            ozon: ozStats,
            wildberries: wbStats
          };
        } else {
          const marketplace_upper = marketplace.toUpperCase();
          
          const requests = parseInt(props.getProperty(`API_REQUESTS_${marketplace_upper}`) || '0');
          const errors = parseInt(props.getProperty(`API_ERRORS_${marketplace_upper}`) || '0');
          const averageResponseTime = parseFloat(props.getProperty(`API_AVG_TIME_${marketplace_upper}`) || '0');
          const timeCount = parseInt(props.getProperty(`API_TIME_COUNT_${marketplace_upper}`) || '0');
          const totalResponseTime = parseInt(props.getProperty(`API_TOTAL_TIME_${marketplace_upper}`) || '0');
          
          return {
            marketplace: marketplace,
            requests: requests,
            errors: errors,
            averageResponseTime: averageResponseTime,
            totalResponseTime: totalResponseTime,
            timeCount: timeCount,
            lastRequestTime: timeCount > 0 ? new Date() : null
          };
        }
      } catch (error) {
        logError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API: ${error.message}`);
        return {
          marketplace: marketplace,
          requests: 0,
          errors: 0,
          averageResponseTime: 0,
          totalResponseTime: 0,
          timeCount: 0,
          lastRequestTime: null
        };
      }
    },
    
    resetStats: function(marketplace) {
      try {
        const props = mockPropertiesService;
        
        if (marketplace === 'all') {
          ['OZON', 'WILDBERRIES'].forEach(mp => {
            props.deleteProperty(`API_REQUESTS_${mp}`);
            props.deleteProperty(`API_ERRORS_${mp}`);
            props.deleteProperty(`API_AVG_TIME_${mp}`);
            props.deleteProperty(`API_TIME_COUNT_${mp}`);
            props.deleteProperty(`API_TOTAL_TIME_${mp}`);
          });
        } else {
          const marketplace_upper = marketplace.toUpperCase();
          props.deleteProperty(`API_REQUESTS_${marketplace_upper}`);
          props.deleteProperty(`API_ERRORS_${marketplace_upper}`);
          props.deleteProperty(`API_AVG_TIME_${marketplace_upper}`);
          props.deleteProperty(`API_TIME_COUNT_${marketplace_upper}`);
          props.deleteProperty(`API_TOTAL_TIME_${marketplace_upper}`);
        }
        
        logInfo(`API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è: ${marketplace}`);
      } catch (error) {
        logError(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API: ${error.message}`);
      }
    }
  };
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  const apiTracker = getApiStatsTracker();
  
  console.log('üìä –¢–ï–°–¢ 1: –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª');
  console.log('='.repeat(40));
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
  apiTracker.incrementRequests('ozon');
  apiTracker.incrementRequests('ozon');
  apiTracker.incrementRequests('wildberries');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
  apiTracker.incrementErrors('ozon');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
  apiTracker.recordResponseTime('ozon', 1500);
  apiTracker.recordResponseTime('ozon', 2000);
  apiTracker.recordResponseTime('wildberries', 800);
  
  console.log('\nüìà –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  console.log('='.repeat(40));
  
  const ozonStats = apiTracker.getStats('ozon');
  const wbStats = apiTracker.getStats('wildberries');
  const allStats = apiTracker.getStats('all');
  
  console.log('\nüü† Ozon —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', JSON.stringify(ozonStats, null, 2));
  console.log('\nüü£ Wildberries —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', JSON.stringify(wbStats, null, 2));
  console.log('\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', JSON.stringify(allStats, null, 2));
  
  console.log('\nüßπ –¢–ï–°–¢ 3: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  console.log('='.repeat(40));
  
  apiTracker.resetStats('wildberries');
  const wbStatsAfterReset = apiTracker.getStats('wildberries');
  console.log('WB —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:', JSON.stringify(wbStatsAfterReset, null, 2));
  
  console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  console.log('üíæ –î–∞–Ω–Ω—ã–µ –≤ mock storage:', mockPropertiesService.data);
}

runTests().catch(console.error);
